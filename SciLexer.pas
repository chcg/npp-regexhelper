unit SciLexer;

////////////////////////////////////////////////////////////////////////////////
// Unit    : SciLexer
// Purpose : Interface for Scintilla Lexer DLL
// Created : 05/03/2001
// Author  : Simon Steele (ss@pnotepad.org)
// History : 05/03/2001 Turned this into a proper VCL wrapper for Scintilla
//                      class window controls. SetFocus is not entirely right,
//                      and is overridden by the scintilla thing. To set focus do:
//                      Scintilla1.SetFocus(True);
//                      Windows.SetFocus(Scintilla1.Handle);
//                      There's no error checking yet, so make sure the DLL is
//                      present!
//                     	Daytime :): Added Event handling generation stuff, and
//                      some ported	types from scintilla.h so that event handling can work!
//           19/03/2001 Added FindText stuff, needs updating in the python...
//           25/03/2001 Changed SCI_REPLACESEL Wrapper variable order - it was wrong!
//		    27/05/2001 Re-Wrote the python generator, and changed the structure of the
//					control.
//           09/06/2001 Removed some function-less functions.
//           03/12/2001 Added WM_ERASEBKGND function to remove scroll-flicker. Thanks
//                  	to Gertjan Schuurmans and Jeff Cogswell.
////////////////////////////////////////////////////////////////////////////////

// Most of this file is automatically generated from the Scintilla.iface interface definition
// file which contains any comments about the definitions. PasGen.py does the generation.

interface

{.$DEFINE DEBUG}

uses Classes, Windows, Controls, Forms, Messages, SysUtils, SciSupport;

var
  scmod : HMODULE;

const
  BorderStyles: array[TBorderStyle] of DWORD = (0, WS_BORDER);

{$DEFINE MACRO_SUPPORT}

type
  //++EventTypes
    TSCEvent_styleneeded = procedure(Sender : TObject; position : LongInt) of object;
    TSCEvent_charadded = procedure(Sender : TObject; ch : LongInt) of object;
    TSCEvent_savepointreached = procedure(Sender : TObject) of object;
    TSCEvent_savepointleft = procedure(Sender : TObject) of object;
    TSCEvent_modifyattemptro = procedure(Sender : TObject) of object;
    TSCEvent_key = procedure(Sender : TObject; ch : LongInt; modifiers : LongInt) of object;
    TSCEvent_doubleclick = procedure(Sender : TObject) of object;
    TSCEvent_updateui = procedure(Sender : TObject) of object;
    TSCEvent_modified = procedure(Sender : TObject; position : LongInt; modificationType : LongInt; text : PAnsiChar; length : LongInt; linesAdded : LongInt; line : LongInt; foldLevelNow : LongInt; foldLevelPrev : LongInt) of object;
    TSCEvent_macrorecord = procedure(Sender : TObject; message : LongInt; wParam : LongInt; lParam : LongInt) of object;
    TSCEvent_marginclick = procedure(Sender : TObject; modifiers : LongInt; position : LongInt; margin : LongInt) of object;
    TSCEvent_needshown = procedure(Sender : TObject; position : LongInt; length : LongInt) of object;
    TSCEvent_painted = procedure(Sender : TObject) of object;
    TSCEvent_userlistselection = procedure(Sender : TObject; listType : LongInt; text : PAnsiChar) of object;
    TSCEvent_uridropped = procedure(Sender : TObject; text : PAnsiChar) of object;
    TSCEvent_dwellstart = procedure(Sender : TObject; position : LongInt) of object;
    TSCEvent_dwellend = procedure(Sender : TObject; position : LongInt) of object;
    TSCEvent_zoom = procedure(Sender : TObject) of object;
    TSCEvent_hotspotclick = procedure(Sender : TObject; modifiers : LongInt; position : LongInt) of object;
    TSCEvent_hotspotdoubleclick = procedure(Sender : TObject; modifiers : LongInt; position : LongInt) of object;
    TSCEvent_calltipclick = procedure(Sender : TObject; position : LongInt) of object;
    TSCEvent_autocselection = procedure(Sender : TObject; text : PAnsiChar) of object;
    TSCEvent_indicatorclick = procedure(Sender : TObject; modifiers : LongInt; position : LongInt) of object;
    TSCEvent_indicatorrelease = procedure(Sender : TObject; modifiers : LongInt; position : LongInt) of object;
    TSCEvent_autoccancelled = procedure(Sender : TObject) of object;
    TSCEvent_autocchardeleted = procedure(Sender : TObject) of object;
//--EventTypes
    TSCEventMsgSent = procedure(Sender : TObject; Msg : Integer; wParam, lParam : Longint) of object;
  TScintilla = class(TWinControl)
  private
    FBorderStyle: TBorderStyle;
    FCreating: Boolean;
    SCPerform : TScintillaMessageFnc;
    sccmdctr : Pointer;
    FWantReturns: Boolean;
    FWantTabs: Boolean;
    //++EventPrivates
        FOnstyleneeded : TSCEvent_styleneeded;
        FOncharadded : TSCEvent_charadded;
        FOnsavepointreached : TSCEvent_savepointreached;
        FOnsavepointleft : TSCEvent_savepointleft;
        FOnmodifyattemptro : TSCEvent_modifyattemptro;
        FOnkey : TSCEvent_key;
        FOndoubleclick : TSCEvent_doubleclick;
        FOnupdateui : TSCEvent_updateui;
        FOnmodified : TSCEvent_modified;
        FOnmacrorecord : TSCEvent_macrorecord;
        FOnmarginclick : TSCEvent_marginclick;
        FOnneedshown : TSCEvent_needshown;
        FOnpainted : TSCEvent_painted;
        FOnuserlistselection : TSCEvent_userlistselection;
        FOnuridropped : TSCEvent_uridropped;
        FOndwellstart : TSCEvent_dwellstart;
        FOndwellend : TSCEvent_dwellend;
        FOnzoom : TSCEvent_zoom;
        FOnhotspotclick : TSCEvent_hotspotclick;
        FOnhotspotdoubleclick : TSCEvent_hotspotdoubleclick;
        FOncalltipclick : TSCEvent_calltipclick;
        FOnautocselection : TSCEvent_autocselection;
        FOnindicatorclick : TSCEvent_indicatorclick;
        FOnindicatorrelease : TSCEvent_indicatorrelease;
        FOnautoccancelled : TSCEvent_autoccancelled;
        FOnautocchardeleted : TSCEvent_autocchardeleted;
    //--EventPrivates
    FOnMsgSent : TSCEventMsgSent;
    FDummy : Boolean;
    procedure SetBorderStyle(Value: TBorderStyle);
    procedure CMCtl3DChanged(var Message: TMessage); message CM_CTL3DCHANGED;
    procedure WMGetDlgCode(var Message: TWMGetDlgCode); message WM_GETDLGCODE;
    procedure WMNCDestroy(var Message: TWMNCDestroy); message WM_NCDESTROY;
    procedure WMNotify(var Message: TWMNotify); message CN_NOTIFY;
    procedure WMEraseBkgnd(var Message: TWMEraseBkgnd); message WM_ERASEBKGND;
    procedure SetDummy(Value : Boolean);
  protected
    procedure CreateParams(var Params: TCreateParams); override;
    procedure CreateWnd; override;
    procedure DestroyWnd; override;
  published
    property Align;
    property BorderStyle: TBorderStyle read FBorderStyle write SetBorderStyle default bsSingle;
    //++EventProperties
    property OnStyleNeeded : TSCEvent_styleneeded read FOnstyleneeded write FOnstyleneeded;
    property OnCharAdded : TSCEvent_charadded read FOncharadded write FOncharadded;
    property OnSavePointReached : TSCEvent_savepointreached read FOnsavepointreached write FOnsavepointreached;
    property OnSavePointLeft : TSCEvent_savepointleft read FOnsavepointleft write FOnsavepointleft;
    property OnModifyAttemptRO : TSCEvent_modifyattemptro read FOnmodifyattemptro write FOnmodifyattemptro;
    property OnKey : TSCEvent_key read FOnkey write FOnkey;
    property OnDoubleClick : TSCEvent_doubleclick read FOndoubleclick write FOndoubleclick;
    property OnUpdateUI : TSCEvent_updateui read FOnupdateui write FOnupdateui;
    property OnModified : TSCEvent_modified read FOnmodified write FOnmodified;
    property OnMacroRecord : TSCEvent_macrorecord read FOnmacrorecord write FOnmacrorecord;
    property OnMarginClick : TSCEvent_marginclick read FOnmarginclick write FOnmarginclick;
    property OnNeedShown : TSCEvent_needshown read FOnneedshown write FOnneedshown;
    property OnPainted : TSCEvent_painted read FOnpainted write FOnpainted;
    property OnUserListSelection : TSCEvent_userlistselection read FOnuserlistselection write FOnuserlistselection;
    property OnURIDropped : TSCEvent_uridropped read FOnuridropped write FOnuridropped;
    property OnDwellStart : TSCEvent_dwellstart read FOndwellstart write FOndwellstart;
    property OnDwellEnd : TSCEvent_dwellend read FOndwellend write FOndwellend;
    property OnZoom : TSCEvent_zoom read FOnzoom write FOnzoom;
    property OnHotSpotClick : TSCEvent_hotspotclick read FOnhotspotclick write FOnhotspotclick;
    property OnHotSpotDoubleClick : TSCEvent_hotspotdoubleclick read FOnhotspotdoubleclick write FOnhotspotdoubleclick;
    property OnCallTipClick : TSCEvent_calltipclick read FOncalltipclick write FOncalltipclick;
    property OnAutoCSelection : TSCEvent_autocselection read FOnautocselection write FOnautocselection;
    property OnIndicatorClick : TSCEvent_indicatorclick read FOnindicatorclick write FOnindicatorclick;
    property OnIndicatorRelease : TSCEvent_indicatorrelease read FOnindicatorrelease write FOnindicatorrelease;
    property OnAutoCCancelled : TSCEvent_autoccancelled read FOnautoccancelled write FOnautoccancelled;
    property OnAutoCCharDeleted : TSCEvent_autocchardeleted read FOnautocchardeleted write FOnautocchardeleted;
    //--EventProperties
    property OnMsgSent : TSCEventMsgSent read FOnMsgSent Write FOnMsgSent;
  public
    constructor Create(AOwner: TComponent); override;
    procedure DefaultHandler(var Message); override;
    procedure LoadFromFile(FileName : TFileName);
    procedure SaveToFile(FileName : TFileName);
    function SPerform(Msg, wParam, lParam : Longint) : LongInt;
//++FuncDef
    procedure AddText(length : LongInt; text : PAnsiChar);
    procedure AddStyledText(length : LongInt; c : PAnsiChar);
    procedure InsertText(pos : LongInt; text : PAnsiChar);
    procedure ClearAll;
    procedure ClearDocumentStyle;
    function GetLength : LongInt;
    function GetCharAt(pos : LongInt) : LongInt;
    function GetCurrentPos : LongInt;
    function GetAnchor : LongInt;
    function GetStyleAt(pos : LongInt) : LongInt;
    procedure Redo;
    procedure SetUndoCollection(collectUndo : LongBool);
    procedure SelectAll;
    procedure SetSavePoint;
    function GetStyledText(tr : PTextRange) : LongInt;
    function CanRedo : LongBool;
    function MarkerLineFromHandle(handle : LongInt) : LongInt;
    procedure MarkerDeleteHandle(handle : LongInt);
    function GetUndoCollection : LongBool;
    function GetViewWS : LongInt;
    procedure SetViewWS(viewWS : LongInt);
    function PositionFromPoint(x : LongInt; y : LongInt) : LongInt;
    function PositionFromPointClose(x : LongInt; y : LongInt) : LongInt;
    procedure GotoLine(line : LongInt);
    procedure GotoPos(pos : LongInt);
    procedure SetAnchor(posAnchor : LongInt);
    function GetCurLine(length : LongInt; text : PAnsiChar) : LongInt;
    function GetEndStyled : LongInt;
    procedure ConvertEOLs(eolMode : LongInt);
    function GetEOLMode : LongInt;
    procedure SetEOLMode(eolMode : LongInt);
    procedure StartStyling(pos : LongInt; mask : LongInt);
    procedure SetStyling(length : LongInt; style : LongInt);
    function GetBufferedDraw : LongBool;
    procedure SetBufferedDraw(buffered : LongBool);
    procedure SetTabWidth(tabWidth : LongInt);
    function GetTabWidth : LongInt;
    procedure SetCodePage(codePage : LongInt);
    procedure SetUsePalette(usePalette : LongBool);
    procedure MarkerDefine(markerNumber : LongInt; markerSymbol : LongInt);
    procedure MarkerSetFore(markerNumber : LongInt; fore : LongInt);
    procedure MarkerSetBack(markerNumber : LongInt; back : LongInt);
    function MarkerAdd(line : LongInt; markerNumber : LongInt) : LongInt;
    procedure MarkerDelete(line : LongInt; markerNumber : LongInt);
    procedure MarkerDeleteAll(markerNumber : LongInt);
    function MarkerGet(line : LongInt) : LongInt;
    function MarkerNext(lineStart : LongInt; markerMask : LongInt) : LongInt;
    function MarkerPrevious(lineStart : LongInt; markerMask : LongInt) : LongInt;
    procedure MarkerDefinePixmap(markerNumber : LongInt; pixmap : PAnsiChar);
    procedure MarkerAddSet(line : LongInt; aset : LongInt);
    procedure MarkerSetAlpha(markerNumber : LongInt; alpha : LongInt);
    procedure SetMarginTypeN(margin : LongInt; marginType : LongInt);
    function GetMarginTypeN(margin : LongInt) : LongInt;
    procedure SetMarginWidthN(margin : LongInt; pixelWidth : LongInt);
    function GetMarginWidthN(margin : LongInt) : LongInt;
    procedure SetMarginMaskN(margin : LongInt; mask : LongInt);
    function GetMarginMaskN(margin : LongInt) : LongInt;
    procedure SetMarginSensitiveN(margin : LongInt; sensitive : LongBool);
    function GetMarginSensitiveN(margin : LongInt) : LongBool;
    procedure StyleClearAll;
    procedure StyleSetFore(style : LongInt; fore : LongInt);
    procedure StyleSetBack(style : LongInt; back : LongInt);
    procedure StyleSetBold(style : LongInt; bold : LongBool);
    procedure StyleSetItalic(style : LongInt; italic : LongBool);
    procedure StyleSetSize(style : LongInt; sizePoints : LongInt);
    procedure StyleSetFont(style : LongInt; fontName : PAnsiChar);
    procedure StyleSetEOLFilled(style : LongInt; filled : LongBool);
    procedure StyleResetDefault;
    procedure StyleSetUnderline(style : LongInt; underline : LongBool);
    function StyleGetFore(style : LongInt) : LongInt;
    function StyleGetBack(style : LongInt) : LongInt;
    function StyleGetBold(style : LongInt) : LongBool;
    function StyleGetItalic(style : LongInt) : LongBool;
    function StyleGetSize(style : LongInt) : LongInt;
    function StyleGetFont(style : LongInt; fontName : PAnsiChar) : LongInt;
    function StyleGetEOLFilled(style : LongInt) : LongBool;
    function StyleGetUnderline(style : LongInt) : LongBool;
    function StyleGetCase(style : LongInt) : LongInt;
    function StyleGetCharacterSet(style : LongInt) : LongInt;
    function StyleGetVisible(style : LongInt) : LongBool;
    function StyleGetChangeable(style : LongInt) : LongBool;
    function StyleGetHotSpot(style : LongInt) : LongBool;
    procedure StyleSetCase(style : LongInt; caseForce : LongInt);
    procedure StyleSetCharacterSet(style : LongInt; characterSet : LongInt);
    procedure StyleSetHotSpot(style : LongInt; hotspot : LongBool);
    procedure SetSelFore(useSetting : LongBool; fore : LongInt);
    procedure SetSelBack(useSetting : LongBool; back : LongInt);
    function GetSelAlpha : LongInt;
    procedure SetSelAlpha(alpha : LongInt);
    function GetSelEOLFilled : LongBool;
    procedure SetSelEOLFilled(filled : LongBool);
    procedure SetCaretFore(fore : LongInt);
    procedure AssignCmdKey(km : LongInt; msg : LongInt);
    procedure ClearCmdKey(km : LongInt);
    procedure ClearAllCmdKeys;
    procedure SetStylingEx(length : LongInt; styles : PAnsiChar);
    procedure StyleSetVisible(style : LongInt; visible : LongBool);
    function GetCaretPeriod : LongInt;
    procedure SetCaretPeriod(periodMilliseconds : LongInt);
    procedure SetWordChars(characters : PAnsiChar);
    procedure BeginUndoAction;
    procedure EndUndoAction;
    procedure IndicSetStyle(indic : LongInt; style : LongInt);
    function IndicGetStyle(indic : LongInt) : LongInt;
    procedure IndicSetFore(indic : LongInt; fore : LongInt);
    function IndicGetFore(indic : LongInt) : LongInt;
    procedure IndicSetUnder(indic : LongInt; under : LongBool);
    function IndicGetUnder(indic : LongInt) : LongBool;
    procedure SetWhitespaceFore(useSetting : LongBool; fore : LongInt);
    procedure SetWhitespaceBack(useSetting : LongBool; back : LongInt);
    procedure SetStyleBits(bits : LongInt);
    function GetStyleBits : LongInt;
    procedure SetLineState(line : LongInt; state : LongInt);
    function GetLineState(line : LongInt) : LongInt;
    function GetMaxLineState : LongInt;
    function GetCaretLineVisible : LongBool;
    procedure SetCaretLineVisible(show : LongBool);
    function GetCaretLineBack : LongInt;
    procedure SetCaretLineBack(back : LongInt);
    procedure StyleSetChangeable(style : LongInt; changeable : LongBool);
    procedure AutoCShow(lenEntered : LongInt; itemList : PAnsiChar);
    procedure AutoCCancel;
    function AutoCActive : LongBool;
    function AutoCPosStart : LongInt;
    procedure AutoCComplete;
    procedure AutoCStops(characterSet : PAnsiChar);
    procedure AutoCSetSeparator(separatorCharacter : LongInt);
    function AutoCGetSeparator : LongInt;
    procedure AutoCSelect(text : PAnsiChar);
    procedure AutoCSetCancelAtStart(cancel : LongBool);
    function AutoCGetCancelAtStart : LongBool;
    procedure AutoCSetFillUps(characterSet : PAnsiChar);
    procedure AutoCSetChooseSingle(chooseSingle : LongBool);
    function AutoCGetChooseSingle : LongBool;
    procedure AutoCSetIgnoreCase(ignoreCase : LongBool);
    function AutoCGetIgnoreCase : LongBool;
    procedure UserListShow(listType : LongInt; itemList : PAnsiChar);
    procedure AutoCSetAutoHide(autoHide : LongBool);
    function AutoCGetAutoHide : LongBool;
    procedure AutoCSetDropRestOfWord(dropRestOfWord : LongBool);
    function AutoCGetDropRestOfWord : LongBool;
    procedure RegisterImage(atype : LongInt; xpmData : PAnsiChar);
    procedure ClearRegisteredImages;
    function AutoCGetTypeSeparator : LongInt;
    procedure AutoCSetTypeSeparator(separatorCharacter : LongInt);
    procedure AutoCSetMaxWidth(characterCount : LongInt);
    function AutoCGetMaxWidth : LongInt;
    procedure AutoCSetMaxHeight(rowCount : LongInt);
    function AutoCGetMaxHeight : LongInt;
    procedure SetIndent(indentSize : LongInt);
    function GetIndent : LongInt;
    procedure SetUseTabs(useTabs : LongBool);
    function GetUseTabs : LongBool;
    procedure SetLineIndentation(line : LongInt; indentSize : LongInt);
    function GetLineIndentation(line : LongInt) : LongInt;
    function GetLineIndentPosition(line : LongInt) : LongInt;
    function GetColumn(pos : LongInt) : LongInt;
    procedure SetHScrollBar(show : LongBool);
    function GetHScrollBar : LongBool;
    procedure SetIndentationGuides(indentView : LongInt);
    function GetIndentationGuides : LongInt;
    procedure SetHighlightGuide(column : LongInt);
    function GetHighlightGuide : LongInt;
    function GetLineEndPosition(line : LongInt) : LongInt;
    function GetCodePage : LongInt;
    function GetCaretFore : LongInt;
    function GetUsePalette : LongBool;
    function GetReadOnly : LongBool;
    procedure SetCurrentPos(pos : LongInt);
    procedure SetSelectionStart(pos : LongInt);
    function GetSelectionStart : LongInt;
    procedure SetSelectionEnd(pos : LongInt);
    function GetSelectionEnd : LongInt;
    procedure SetPrintMagnification(magnification : LongInt);
    function GetPrintMagnification : LongInt;
    procedure SetPrintColourMode(mode : LongInt);
    function GetPrintColourMode : LongInt;
    function FindText(flags : LongInt; ft : PTextToFind) : LongInt;
    function FormatRange(draw : LongBool; fr : LongInt) : LongInt;
    function GetFirstVisibleLine : LongInt;
    function GetLine(line : LongInt; text : PAnsiChar) : LongInt;
    function GetLineCount : LongInt;
    procedure SetMarginLeft(pixelWidth : LongInt);
    function GetMarginLeft : LongInt;
    procedure SetMarginRight(pixelWidth : LongInt);
    function GetMarginRight : LongInt;
    function GetModify : LongBool;
    procedure SetSel(start : LongInt; end_ : LongInt);
    function GetSelText(text : PAnsiChar) : LongInt;
    function GetTextRange(tr : PTextRange) : LongInt;
    procedure HideSelection(normal : LongBool);
    function PointXFromPosition(pos : LongInt) : LongInt;
    function PointYFromPosition(pos : LongInt) : LongInt;
    function LineFromPosition(pos : LongInt) : LongInt;
    function PositionFromLine(line : LongInt) : LongInt;
    procedure LineScroll(columns : LongInt; lines : LongInt);
    procedure ScrollCaret;
    procedure ReplaceSel(text : PAnsiChar);
    procedure SetReadOnly(readOnly : LongBool);
    procedure Null;
    function CanPaste : LongBool;
    function CanUndo : LongBool;
    procedure EmptyUndoBuffer;
    procedure Undo;
    procedure Cut;
    procedure Copy;
    procedure Paste;
    procedure Clear;
    procedure SetText(text : PAnsiChar);
    function GetText(length : LongInt; text : PAnsiChar) : LongInt;
    function GetTextLength : LongInt;
    function GetDirectFunction : LongInt;
    function GetDirectPointer : LongInt;
    procedure SetOvertype(overtype : LongBool);
    function GetOvertype : LongBool;
    procedure SetCaretWidth(pixelWidth : LongInt);
    function GetCaretWidth : LongInt;
    procedure SetTargetStart(pos : LongInt);
    function GetTargetStart : LongInt;
    procedure SetTargetEnd(pos : LongInt);
    function GetTargetEnd : LongInt;
    function ReplaceTarget(length : LongInt; text : PAnsiChar) : LongInt;
    function ReplaceTargetRE(length : LongInt; text : PAnsiChar) : LongInt;
    function SearchInTarget(length : LongInt; text : PAnsiChar) : LongInt;
    procedure SetSearchFlags(flags : LongInt);
    function GetSearchFlags : LongInt;
    procedure CallTipShow(pos : LongInt; definition : PAnsiChar);
    procedure CallTipCancel;
    function CallTipActive : LongBool;
    function CallTipPosStart : LongInt;
    procedure CallTipSetHlt(start : LongInt; end_ : LongInt);
    procedure CallTipSetBack(back : LongInt);
    procedure CallTipSetFore(fore : LongInt);
    procedure CallTipSetForeHlt(fore : LongInt);
    procedure CallTipUseStyle(tabSize : LongInt);
    function VisibleFromDocLine(line : LongInt) : LongInt;
    function DocLineFromVisible(lineDisplay : LongInt) : LongInt;
    function WrapCount(line : LongInt) : LongInt;
    procedure SetFoldLevel(line : LongInt; level : LongInt);
    function GetFoldLevel(line : LongInt) : LongInt;
    function GetLastChild(line : LongInt; level : LongInt) : LongInt;
    function GetFoldParent(line : LongInt) : LongInt;
    procedure ShowLines(lineStart : LongInt; lineEnd : LongInt);
    procedure HideLines(lineStart : LongInt; lineEnd : LongInt);
    function GetLineVisible(line : LongInt) : LongBool;
    procedure SetFoldExpanded(line : LongInt; expanded : LongBool);
    function GetFoldExpanded(line : LongInt) : LongBool;
    procedure ToggleFold(line : LongInt);
    procedure EnsureVisible(line : LongInt);
    procedure SetFoldFlags(flags : LongInt);
    procedure EnsureVisibleEnforcePolicy(line : LongInt);
    procedure SetTabIndents(tabIndents : LongBool);
    function GetTabIndents : LongBool;
    procedure SetBackSpaceUnIndents(bsUnIndents : LongBool);
    function GetBackSpaceUnIndents : LongBool;
    procedure SetMouseDwellTime(periodMilliseconds : LongInt);
    function GetMouseDwellTime : LongInt;
    function WordStartPosition(pos : LongInt; onlyWordCharacters : LongBool) : LongInt;
    function WordEndPosition(pos : LongInt; onlyWordCharacters : LongBool) : LongInt;
    procedure SetWrapMode(mode : LongInt);
    function GetWrapMode : LongInt;
    procedure SetWrapVisualFlags(wrapVisualFlags : LongInt);
    function GetWrapVisualFlags : LongInt;
    procedure SetWrapVisualFlagsLocation(wrapVisualFlagsLocation : LongInt);
    function GetWrapVisualFlagsLocation : LongInt;
    procedure SetWrapStartIndent(indent : LongInt);
    function GetWrapStartIndent : LongInt;
    procedure SetWrapIndentMode(mode : LongInt);
    function GetWrapIndentMode : LongInt;
    procedure SetLayoutCache(mode : LongInt);
    function GetLayoutCache : LongInt;
    procedure SetScrollWidth(pixelWidth : LongInt);
    function GetScrollWidth : LongInt;
    procedure SetScrollWidthTracking(tracking : LongBool);
    function GetScrollWidthTracking : LongBool;
    function TextWidth(style : LongInt; text : PAnsiChar) : LongInt;
    procedure SetEndAtLastLine(endAtLastLine : LongBool);
    function GetEndAtLastLine : LongBool;
    function TextHeight(line : LongInt) : LongInt;
    procedure SetVScrollBar(show : LongBool);
    function GetVScrollBar : LongBool;
    procedure AppendText(length : LongInt; text : PAnsiChar);
    function GetTwoPhaseDraw : LongBool;
    procedure SetTwoPhaseDraw(twoPhase : LongBool);
    procedure TargetFromSelection;
    procedure LinesJoin;
    procedure LinesSplit(pixelWidth : LongInt);
    procedure SetFoldMarginColour(useSetting : LongBool; back : LongInt);
    procedure SetFoldMarginHiColour(useSetting : LongBool; fore : LongInt);
    procedure LineDown;
    procedure LineDownExtend;
    procedure LineUp;
    procedure LineUpExtend;
    procedure CharLeft;
    procedure CharLeftExtend;
    procedure CharRight;
    procedure CharRightExtend;
    procedure WordLeft;
    procedure WordLeftExtend;
    procedure WordRight;
    procedure WordRightExtend;
    procedure Home;
    procedure HomeExtend;
    procedure LineEnd;
    procedure LineEndExtend;
    procedure DocumentStart;
    procedure DocumentStartExtend;
    procedure DocumentEnd;
    procedure DocumentEndExtend;
    procedure PageUp;
    procedure PageUpExtend;
    procedure PageDown;
    procedure PageDownExtend;
    procedure EditToggleOvertype;
    procedure Cancel;
    procedure DeleteBack;
    procedure Tab;
    procedure BackTab;
    procedure NewLine;
    procedure FormFeed;
    procedure VCHome;
    procedure VCHomeExtend;
    procedure ZoomIn;
    procedure ZoomOut;
    procedure DelWordLeft;
    procedure DelWordRight;
    procedure DelWordRightEnd;
    procedure LineCut;
    procedure LineDelete;
    procedure LineTranspose;
    procedure LineDuplicate;
    procedure LowerCase;
    procedure UpperCase;
    procedure LineScrollDown;
    procedure LineScrollUp;
    procedure DeleteBackNotLine;
    procedure HomeDisplay;
    procedure HomeDisplayExtend;
    procedure LineEndDisplay;
    procedure LineEndDisplayExtend;
    procedure HomeWrap;
    procedure HomeWrapExtend;
    procedure LineEndWrap;
    procedure LineEndWrapExtend;
    procedure VCHomeWrap;
    procedure VCHomeWrapExtend;
    procedure LineCopy;
    procedure MoveCaretInsideView;
    function LineLength(line : LongInt) : LongInt;
    procedure BraceHighlight(pos1 : LongInt; pos2 : LongInt);
    procedure BraceBadLight(pos : LongInt);
    function BraceMatch(pos : LongInt) : LongInt;
    function GetViewEOL : LongBool;
    procedure SetViewEOL(visible : LongBool);
    function GetDocPointer : LongInt;
    procedure SetDocPointer(pointer : LongInt);
    procedure SetModEventMask(mask : LongInt);
    function GetEdgeColumn : LongInt;
    procedure SetEdgeColumn(column : LongInt);
    function GetEdgeMode : LongInt;
    procedure SetEdgeMode(mode : LongInt);
    function GetEdgeColour : LongInt;
    procedure SetEdgeColour(edgeColour : LongInt);
    procedure SearchAnchor;
    function SearchNext(flags : LongInt; text : PAnsiChar) : LongInt;
    function SearchPrev(flags : LongInt; text : PAnsiChar) : LongInt;
    function LinesOnScreen : LongInt;
    procedure UsePopUp(allowPopUp : LongBool);
    function SelectionIsRectangle : LongBool;
    procedure SetZoom(zoom : LongInt);
    function GetZoom : LongInt;
    function CreateDocument : LongInt;
    procedure AddRefDocument(doc : LongInt);
    procedure ReleaseDocument(doc : LongInt);
    function GetModEventMask : LongInt;
    procedure SetFocusEx(focus : LongBool);
    function GetFocus : LongBool;
    procedure SetStatus(statusCode : LongInt);
    function GetStatus : LongInt;
    procedure SetMouseDownCaptures(captures : LongBool);
    function GetMouseDownCaptures : LongBool;
    procedure SetCursor(cursorType : LongInt);
    function GetCursor : LongInt;
    procedure SetControlCharSymbol(symbol : LongInt);
    function GetControlCharSymbol : LongInt;
    procedure WordPartLeft;
    procedure WordPartLeftExtend;
    procedure WordPartRight;
    procedure WordPartRightExtend;
    procedure SetVisiblePolicy(visiblePolicy : LongInt; visibleSlop : LongInt);
    procedure DelLineLeft;
    procedure DelLineRight;
    procedure SetXOffset(newOffset : LongInt);
    function GetXOffset : LongInt;
    procedure ChooseCaretX;
    procedure GrabFocus;
    procedure SetXCaretPolicy(caretPolicy : LongInt; caretSlop : LongInt);
    procedure SetYCaretPolicy(caretPolicy : LongInt; caretSlop : LongInt);
    procedure SetPrintWrapMode(mode : LongInt);
    function GetPrintWrapMode : LongInt;
    procedure SetHotspotActiveFore(useSetting : LongBool; fore : LongInt);
    function GetHotspotActiveFore : LongInt;
    procedure SetHotspotActiveBack(useSetting : LongBool; back : LongInt);
    function GetHotspotActiveBack : LongInt;
    procedure SetHotspotActiveUnderline(underline : LongBool);
    function GetHotspotActiveUnderline : LongBool;
    procedure SetHotspotSingleLine(singleLine : LongBool);
    function GetHotspotSingleLine : LongBool;
    procedure ParaDown;
    procedure ParaDownExtend;
    procedure ParaUp;
    procedure ParaUpExtend;
    function PositionBefore(pos : LongInt) : LongInt;
    function PositionAfter(pos : LongInt) : LongInt;
    procedure CopyRange(start : LongInt; end_ : LongInt);
    procedure CopyText(length : LongInt; text : PAnsiChar);
    procedure SetSelectionMode(mode : LongInt);
    function GetSelectionMode : LongInt;
    function GetLineSelStartPosition(line : LongInt) : LongInt;
    function GetLineSelEndPosition(line : LongInt) : LongInt;
    procedure LineDownRectExtend;
    procedure LineUpRectExtend;
    procedure CharLeftRectExtend;
    procedure CharRightRectExtend;
    procedure HomeRectExtend;
    procedure VCHomeRectExtend;
    procedure LineEndRectExtend;
    procedure PageUpRectExtend;
    procedure PageDownRectExtend;
    procedure StutteredPageUp;
    procedure StutteredPageUpExtend;
    procedure StutteredPageDown;
    procedure StutteredPageDownExtend;
    procedure WordLeftEnd;
    procedure WordLeftEndExtend;
    procedure WordRightEnd;
    procedure WordRightEndExtend;
    procedure SetWhitespaceChars(characters : PAnsiChar);
    procedure SetCharsDefault;
    function AutoCGetCurrent : LongInt;
    procedure Allocate(bytes : LongInt);
    function TargetAsUTF8(s : PAnsiChar) : LongInt;
    procedure SetLengthForEncode(bytes : LongInt);
    function EncodedFromUTF8(utf8 : PAnsiChar; encoded : PAnsiChar) : LongInt;
    function FindColumn(line : LongInt; column : LongInt) : LongInt;
    function GetCaretSticky : LongBool;
    procedure SetCaretSticky(useCaretStickyBehaviour : LongBool);
    procedure ToggleCaretSticky;
    procedure SetPasteConvertEndings(convert : LongBool);
    function GetPasteConvertEndings : LongBool;
    procedure SelectionDuplicate;
    procedure SetCaretLineBackAlpha(alpha : LongInt);
    function GetCaretLineBackAlpha : LongInt;
    procedure SetCaretStyle(caretStyle : LongInt);
    function GetCaretStyle : LongInt;
    procedure SetIndicatorCurrent(indicator : LongInt);
    function GetIndicatorCurrent : LongInt;
    procedure SetIndicatorValue(value : LongInt);
    function GetIndicatorValue : LongInt;
    procedure IndicatorFillRange(position : LongInt; fillLength : LongInt);
    procedure IndicatorClearRange(position : LongInt; clearLength : LongInt);
    function IndicatorAllOnFor(position : LongInt) : LongInt;
    function IndicatorValueAt(indicator : LongInt; position : LongInt) : LongInt;
    function IndicatorStart(indicator : LongInt; position : LongInt) : LongInt;
    function IndicatorEnd(indicator : LongInt; position : LongInt) : LongInt;
    procedure SetPositionCache(size : LongInt);
    function GetPositionCache : LongInt;
    procedure CopyAllowLine;
    function GetCharacterPointer : LongInt;
    procedure SetKeysUnicode(keysUnicode : LongBool);
    function GetKeysUnicode : LongBool;
    procedure IndicSetAlpha(indicator : LongInt; alpha : LongInt);
    function IndicGetAlpha(indicator : LongInt) : LongInt;
    procedure SetExtraAscent(extraAscent : LongInt);
    function GetExtraAscent : LongInt;
    procedure SetExtraDescent(extraDescent : LongInt);
    function GetExtraDescent : LongInt;
    function MarkerSymbolDefined(markerNumber : LongInt) : LongInt;
    procedure MarginSetText(line : LongInt; text : PAnsiChar);
    function MarginGetText(line : LongInt; text : PAnsiChar) : LongInt;
    procedure MarginSetStyle(line : LongInt; style : LongInt);
    function MarginGetStyle(line : LongInt) : LongInt;
    procedure MarginSetStyles(line : LongInt; styles : PAnsiChar);
    function MarginGetStyles(line : LongInt; styles : PAnsiChar) : LongInt;
    procedure MarginTextClearAll;
    procedure MarginSetStyleOffset(style : LongInt);
    function MarginGetStyleOffset : LongInt;
    procedure AnnotationSetText(line : LongInt; text : PAnsiChar);
    function AnnotationGetText(line : LongInt; text : PAnsiChar) : LongInt;
    procedure AnnotationSetStyle(line : LongInt; style : LongInt);
    function AnnotationGetStyle(line : LongInt) : LongInt;
    procedure AnnotationSetStyles(line : LongInt; styles : PAnsiChar);
    function AnnotationGetStyles(line : LongInt; styles : PAnsiChar) : LongInt;
    function AnnotationGetLines(line : LongInt) : LongInt;
    procedure AnnotationClearAll;
    procedure AnnotationSetVisible(visible : LongInt);
    function AnnotationGetVisible : LongInt;
    procedure AnnotationSetStyleOffset(style : LongInt);
    function AnnotationGetStyleOffset : LongInt;
    procedure AddUndoAction(token : LongInt; flags : LongInt);
    function CharPositionFromPoint(x : LongInt; y : LongInt) : LongInt;
    function CharPositionFromPointClose(x : LongInt; y : LongInt) : LongInt;
    procedure SetMultipleSelection(multipleSelection : LongBool);
    function GetMultipleSelection : LongBool;
    procedure SetAdditionalSelectionTyping(additionalSelectionTyping : LongBool);
    function GetAdditionalSelectionTyping : LongBool;
    procedure SetAdditionalCaretsBlink(additionalCaretsBlink : LongBool);
    function GetAdditionalCaretsBlink : LongBool;
    function GetSelections : LongInt;
    procedure ClearSelections;
    function SetSelection(caret : LongInt; anchor : LongInt) : LongInt;
    function AddSelection(caret : LongInt; anchor : LongInt) : LongInt;
    procedure SetMainSelection(selection : LongInt);
    function GetMainSelection : LongInt;
    procedure SetSelectionNCaret(selection : LongInt; pos : LongInt);
    function GetSelectionNCaret(selection : LongInt) : LongInt;
    procedure SetSelectionNAnchor(selection : LongInt; posAnchor : LongInt);
    function GetSelectionNAnchor(selection : LongInt) : LongInt;
    procedure SetSelectionNCaretVirtualSpace(selection : LongInt; space : LongInt);
    function GetSelectionNCaretVirtualSpace(selection : LongInt) : LongInt;
    procedure SetSelectionNAnchorVirtualSpace(selection : LongInt; space : LongInt);
    function GetSelectionNAnchorVirtualSpace(selection : LongInt) : LongInt;
    procedure SetSelectionNStart(selection : LongInt; pos : LongInt);
    function GetSelectionNStart : LongInt;
    procedure SetSelectionNEnd(selection : LongInt; pos : LongInt);
    function GetSelectionNEnd : LongInt;
    procedure SetRectangularSelectionCaret(pos : LongInt);
    function GetRectangularSelectionCaret : LongInt;
    procedure SetRectangularSelectionAnchor(posAnchor : LongInt);
    function GetRectangularSelectionAnchor : LongInt;
    procedure SetRectangularSelectionCaretVirtualSpace(space : LongInt);
    function GetRectangularSelectionCaretVirtualSpace : LongInt;
    procedure SetRectangularSelectionAnchorVirtualSpace(space : LongInt);
    function GetRectangularSelectionAnchorVirtualSpace : LongInt;
    procedure SetVirtualSpaceOptions(virtualSpaceOptions : LongInt);
    function GetVirtualSpaceOptions : LongInt;
    procedure SetRectangularSelectionModifier(modifier : LongInt);
    function GetRectangularSelectionModifier : LongInt;
    procedure SetAdditionalSelFore(fore : LongInt);
    procedure SetAdditionalSelBack(back : LongInt);
    procedure SetAdditionalSelAlpha(alpha : LongInt);
    function GetAdditionalSelAlpha : LongInt;
    procedure SetAdditionalCaretFore(fore : LongInt);
    function GetAdditionalCaretFore : LongInt;
    procedure RotateSelection;
    procedure SwapMainAnchorCaret;
    procedure StartRecord;
    procedure StopRecord;
    procedure SetLexer(lexer : LongInt);
    function GetLexer : LongInt;
    procedure Colourise(start : LongInt; end_ : LongInt);
    procedure SetProperty(key : PAnsiChar; value : PAnsiChar);
    procedure SetKeyWords(keywordSet : LongInt; keyWords : PAnsiChar);
    procedure SetLexerLanguage(language : PAnsiChar);
    procedure LoadLexerLibrary(path : PAnsiChar);
    function GetProperty(key : PAnsiChar; buf : PAnsiChar) : LongInt;
    function GetPropertyExpanded(key : PAnsiChar; buf : PAnsiChar) : LongInt;
    function GetPropertyInt(key : PAnsiChar) : LongInt;
    function GetStyleBitsNeeded : LongInt;
//--FuncDef
    property Dummy : Boolean read FDummy Write SetDummy;
    property OnExit;
    property OnEnter;
  end;

var
  fMsgSentDummyProc : TSCEventMsgSent;

procedure Register;

implementation

//The Python generator will insert the function definitions below this line...
//++FuncImp
procedure TScintilla.AddText(length : LongInt; text : PAnsiChar);
begin
  SCPerform(sccmdctr, SCI_ADDTEXT, length, LongInt(text));
end;

procedure TScintilla.AddStyledText(length : LongInt; c : PAnsiChar);
begin
  SCPerform(sccmdctr, SCI_ADDSTYLEDTEXT, length, LongInt(c));
end;

procedure TScintilla.InsertText(pos : LongInt; text : PAnsiChar);
begin
  SCPerform(sccmdctr, SCI_INSERTTEXT, pos, LongInt(text));
end;

procedure TScintilla.ClearAll;
begin
  SCPerform(sccmdctr, SCI_CLEARALL, 0, 0);
end;

procedure TScintilla.ClearDocumentStyle;
begin
  SCPerform(sccmdctr, SCI_CLEARDOCUMENTSTYLE, 0, 0);
end;

function TScintilla.GetLength : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETLENGTH, 0, 0);
end;

function TScintilla.GetCharAt(pos : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETCHARAT, pos, 0);
end;

function TScintilla.GetCurrentPos : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETCURRENTPOS, 0, 0);
end;

function TScintilla.GetAnchor : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETANCHOR, 0, 0);
end;

function TScintilla.GetStyleAt(pos : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETSTYLEAT, pos, 0);
end;

procedure TScintilla.Redo;
begin
  SCPerform(sccmdctr, SCI_REDO, 0, 0);
end;

procedure TScintilla.SetUndoCollection(collectUndo : LongBool);
begin
  SCPerform(sccmdctr, SCI_SETUNDOCOLLECTION, LongInt(collectUndo), 0);
end;

procedure TScintilla.SelectAll;
begin
  SCPerform(sccmdctr, SCI_SELECTALL, 0, 0);
end;

procedure TScintilla.SetSavePoint;
begin
  SCPerform(sccmdctr, SCI_SETSAVEPOINT, 0, 0);
end;

function TScintilla.GetStyledText(tr : PTextRange) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETSTYLEDTEXT, 0, LongInt(tr));
end;

function TScintilla.CanRedo : LongBool;
begin
  result := LongBool(SCPerform(sccmdctr, SCI_CANREDO, 0, 0));
end;

function TScintilla.MarkerLineFromHandle(handle : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_MARKERLINEFROMHANDLE, handle, 0);
end;

procedure TScintilla.MarkerDeleteHandle(handle : LongInt);
begin
  SCPerform(sccmdctr, SCI_MARKERDELETEHANDLE, handle, 0);
end;

function TScintilla.GetUndoCollection : LongBool;
begin
  result := LongBool(SCPerform(sccmdctr, SCI_GETUNDOCOLLECTION, 0, 0));
end;

function TScintilla.GetViewWS : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETVIEWWS, 0, 0);
end;

procedure TScintilla.SetViewWS(viewWS : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETVIEWWS, viewWS, 0);
end;

function TScintilla.PositionFromPoint(x : LongInt; y : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_POSITIONFROMPOINT, x, y);
end;

function TScintilla.PositionFromPointClose(x : LongInt; y : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_POSITIONFROMPOINTCLOSE, x, y);
end;

procedure TScintilla.GotoLine(line : LongInt);
begin
  SCPerform(sccmdctr, SCI_GOTOLINE, line, 0);
end;

procedure TScintilla.GotoPos(pos : LongInt);
begin
  SCPerform(sccmdctr, SCI_GOTOPOS, pos, 0);
end;

procedure TScintilla.SetAnchor(posAnchor : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETANCHOR, posAnchor, 0);
end;

function TScintilla.GetCurLine(length : LongInt; text : PAnsiChar) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETCURLINE, length, LongInt(text));
end;

function TScintilla.GetEndStyled : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETENDSTYLED, 0, 0);
end;

procedure TScintilla.ConvertEOLs(eolMode : LongInt);
begin
  SCPerform(sccmdctr, SCI_CONVERTEOLS, eolMode, 0);
end;

function TScintilla.GetEOLMode : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETEOLMODE, 0, 0);
end;

procedure TScintilla.SetEOLMode(eolMode : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETEOLMODE, eolMode, 0);
end;

procedure TScintilla.StartStyling(pos : LongInt; mask : LongInt);
begin
  SCPerform(sccmdctr, SCI_STARTSTYLING, pos, mask);
end;

procedure TScintilla.SetStyling(length : LongInt; style : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETSTYLING, length, style);
end;

function TScintilla.GetBufferedDraw : LongBool;
begin
  result := LongBool(SCPerform(sccmdctr, SCI_GETBUFFEREDDRAW, 0, 0));
end;

procedure TScintilla.SetBufferedDraw(buffered : LongBool);
begin
  SCPerform(sccmdctr, SCI_SETBUFFEREDDRAW, LongInt(buffered), 0);
end;

procedure TScintilla.SetTabWidth(tabWidth : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETTABWIDTH, tabWidth, 0);
end;

function TScintilla.GetTabWidth : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETTABWIDTH, 0, 0);
end;

procedure TScintilla.SetCodePage(codePage : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETCODEPAGE, codePage, 0);
end;

procedure TScintilla.SetUsePalette(usePalette : LongBool);
begin
  SCPerform(sccmdctr, SCI_SETUSEPALETTE, LongInt(usePalette), 0);
end;

procedure TScintilla.MarkerDefine(markerNumber : LongInt; markerSymbol : LongInt);
begin
  SCPerform(sccmdctr, SCI_MARKERDEFINE, markerNumber, markerSymbol);
end;

procedure TScintilla.MarkerSetFore(markerNumber : LongInt; fore : LongInt);
begin
  SCPerform(sccmdctr, SCI_MARKERSETFORE, markerNumber, fore);
end;

procedure TScintilla.MarkerSetBack(markerNumber : LongInt; back : LongInt);
begin
  SCPerform(sccmdctr, SCI_MARKERSETBACK, markerNumber, back);
end;

function TScintilla.MarkerAdd(line : LongInt; markerNumber : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_MARKERADD, line, markerNumber);
end;

procedure TScintilla.MarkerDelete(line : LongInt; markerNumber : LongInt);
begin
  SCPerform(sccmdctr, SCI_MARKERDELETE, line, markerNumber);
end;

procedure TScintilla.MarkerDeleteAll(markerNumber : LongInt);
begin
  SCPerform(sccmdctr, SCI_MARKERDELETEALL, markerNumber, 0);
end;

function TScintilla.MarkerGet(line : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_MARKERGET, line, 0);
end;

function TScintilla.MarkerNext(lineStart : LongInt; markerMask : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_MARKERNEXT, lineStart, markerMask);
end;

function TScintilla.MarkerPrevious(lineStart : LongInt; markerMask : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_MARKERPREVIOUS, lineStart, markerMask);
end;

procedure TScintilla.MarkerDefinePixmap(markerNumber : LongInt; pixmap : PAnsiChar);
begin
  SCPerform(sccmdctr, SCI_MARKERDEFINEPIXMAP, markerNumber, LongInt(pixmap));
end;

procedure TScintilla.MarkerAddSet(line : LongInt; aset : LongInt);
begin
  SCPerform(sccmdctr, SCI_MARKERADDSET, line, aset);
end;

procedure TScintilla.MarkerSetAlpha(markerNumber : LongInt; alpha : LongInt);
begin
  SCPerform(sccmdctr, SCI_MARKERSETALPHA, markerNumber, alpha);
end;

procedure TScintilla.SetMarginTypeN(margin : LongInt; marginType : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETMARGINTYPEN, margin, marginType);
end;

function TScintilla.GetMarginTypeN(margin : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETMARGINTYPEN, margin, 0);
end;

procedure TScintilla.SetMarginWidthN(margin : LongInt; pixelWidth : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETMARGINWIDTHN, margin, pixelWidth);
end;

function TScintilla.GetMarginWidthN(margin : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETMARGINWIDTHN, margin, 0);
end;

procedure TScintilla.SetMarginMaskN(margin : LongInt; mask : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETMARGINMASKN, margin, mask);
end;

function TScintilla.GetMarginMaskN(margin : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETMARGINMASKN, margin, 0);
end;

procedure TScintilla.SetMarginSensitiveN(margin : LongInt; sensitive : LongBool);
begin
  SCPerform(sccmdctr, SCI_SETMARGINSENSITIVEN, margin, LongInt(sensitive));
end;

function TScintilla.GetMarginSensitiveN(margin : LongInt) : LongBool;
begin
  result := LongBool(SCPerform(sccmdctr, SCI_GETMARGINSENSITIVEN, margin, 0));
end;

procedure TScintilla.StyleClearAll;
begin
  SCPerform(sccmdctr, SCI_STYLECLEARALL, 0, 0);
end;

procedure TScintilla.StyleSetFore(style : LongInt; fore : LongInt);
begin
  SCPerform(sccmdctr, SCI_STYLESETFORE, style, fore);
end;

procedure TScintilla.StyleSetBack(style : LongInt; back : LongInt);
begin
  SCPerform(sccmdctr, SCI_STYLESETBACK, style, back);
end;

procedure TScintilla.StyleSetBold(style : LongInt; bold : LongBool);
begin
  SCPerform(sccmdctr, SCI_STYLESETBOLD, style, LongInt(bold));
end;

procedure TScintilla.StyleSetItalic(style : LongInt; italic : LongBool);
begin
  SCPerform(sccmdctr, SCI_STYLESETITALIC, style, LongInt(italic));
end;

procedure TScintilla.StyleSetSize(style : LongInt; sizePoints : LongInt);
begin
  SCPerform(sccmdctr, SCI_STYLESETSIZE, style, sizePoints);
end;

procedure TScintilla.StyleSetFont(style : LongInt; fontName : PAnsiChar);
begin
  SCPerform(sccmdctr, SCI_STYLESETFONT, style, LongInt(fontName));
end;

procedure TScintilla.StyleSetEOLFilled(style : LongInt; filled : LongBool);
begin
  SCPerform(sccmdctr, SCI_STYLESETEOLFILLED, style, LongInt(filled));
end;

procedure TScintilla.StyleResetDefault;
begin
  SCPerform(sccmdctr, SCI_STYLERESETDEFAULT, 0, 0);
end;

procedure TScintilla.StyleSetUnderline(style : LongInt; underline : LongBool);
begin
  SCPerform(sccmdctr, SCI_STYLESETUNDERLINE, style, LongInt(underline));
end;

function TScintilla.StyleGetFore(style : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_STYLEGETFORE, style, 0);
end;

function TScintilla.StyleGetBack(style : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_STYLEGETBACK, style, 0);
end;

function TScintilla.StyleGetBold(style : LongInt) : LongBool;
begin
  result := LongBool(SCPerform(sccmdctr, SCI_STYLEGETBOLD, style, 0));
end;

function TScintilla.StyleGetItalic(style : LongInt) : LongBool;
begin
  result := LongBool(SCPerform(sccmdctr, SCI_STYLEGETITALIC, style, 0));
end;

function TScintilla.StyleGetSize(style : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_STYLEGETSIZE, style, 0);
end;

function TScintilla.StyleGetFont(style : LongInt; fontName : PAnsiChar) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_STYLEGETFONT, style, LongInt(fontName));
end;

function TScintilla.StyleGetEOLFilled(style : LongInt) : LongBool;
begin
  result := LongBool(SCPerform(sccmdctr, SCI_STYLEGETEOLFILLED, style, 0));
end;

function TScintilla.StyleGetUnderline(style : LongInt) : LongBool;
begin
  result := LongBool(SCPerform(sccmdctr, SCI_STYLEGETUNDERLINE, style, 0));
end;

function TScintilla.StyleGetCase(style : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_STYLEGETCASE, style, 0);
end;

function TScintilla.StyleGetCharacterSet(style : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_STYLEGETCHARACTERSET, style, 0);
end;

function TScintilla.StyleGetVisible(style : LongInt) : LongBool;
begin
  result := LongBool(SCPerform(sccmdctr, SCI_STYLEGETVISIBLE, style, 0));
end;

function TScintilla.StyleGetChangeable(style : LongInt) : LongBool;
begin
  result := LongBool(SCPerform(sccmdctr, SCI_STYLEGETCHANGEABLE, style, 0));
end;

function TScintilla.StyleGetHotSpot(style : LongInt) : LongBool;
begin
  result := LongBool(SCPerform(sccmdctr, SCI_STYLEGETHOTSPOT, style, 0));
end;

procedure TScintilla.StyleSetCase(style : LongInt; caseForce : LongInt);
begin
  SCPerform(sccmdctr, SCI_STYLESETCASE, style, caseForce);
end;

procedure TScintilla.StyleSetCharacterSet(style : LongInt; characterSet : LongInt);
begin
  SCPerform(sccmdctr, SCI_STYLESETCHARACTERSET, style, characterSet);
end;

procedure TScintilla.StyleSetHotSpot(style : LongInt; hotspot : LongBool);
begin
  SCPerform(sccmdctr, SCI_STYLESETHOTSPOT, style, LongInt(hotspot));
end;

procedure TScintilla.SetSelFore(useSetting : LongBool; fore : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETSELFORE, LongInt(useSetting), fore);
end;

procedure TScintilla.SetSelBack(useSetting : LongBool; back : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETSELBACK, LongInt(useSetting), back);
end;

function TScintilla.GetSelAlpha : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETSELALPHA, 0, 0);
end;

procedure TScintilla.SetSelAlpha(alpha : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETSELALPHA, alpha, 0);
end;

function TScintilla.GetSelEOLFilled : LongBool;
begin
  result := LongBool(SCPerform(sccmdctr, SCI_GETSELEOLFILLED, 0, 0));
end;

procedure TScintilla.SetSelEOLFilled(filled : LongBool);
begin
  SCPerform(sccmdctr, SCI_SETSELEOLFILLED, LongInt(filled), 0);
end;

procedure TScintilla.SetCaretFore(fore : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETCARETFORE, fore, 0);
end;

procedure TScintilla.AssignCmdKey(km : LongInt; msg : LongInt);
begin
  SCPerform(sccmdctr, SCI_ASSIGNCMDKEY, km, msg);
end;

procedure TScintilla.ClearCmdKey(km : LongInt);
begin
  SCPerform(sccmdctr, SCI_CLEARCMDKEY, km, 0);
end;

procedure TScintilla.ClearAllCmdKeys;
begin
  SCPerform(sccmdctr, SCI_CLEARALLCMDKEYS, 0, 0);
end;

procedure TScintilla.SetStylingEx(length : LongInt; styles : PAnsiChar);
begin
  SCPerform(sccmdctr, SCI_SETSTYLINGEX, length, LongInt(styles));
end;

procedure TScintilla.StyleSetVisible(style : LongInt; visible : LongBool);
begin
  SCPerform(sccmdctr, SCI_STYLESETVISIBLE, style, LongInt(visible));
end;

function TScintilla.GetCaretPeriod : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETCARETPERIOD, 0, 0);
end;

procedure TScintilla.SetCaretPeriod(periodMilliseconds : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETCARETPERIOD, periodMilliseconds, 0);
end;

procedure TScintilla.SetWordChars(characters : PAnsiChar);
begin
  SCPerform(sccmdctr, SCI_SETWORDCHARS, 0, LongInt(characters));
end;

procedure TScintilla.BeginUndoAction;
begin
  SCPerform(sccmdctr, SCI_BEGINUNDOACTION, 0, 0);
end;

procedure TScintilla.EndUndoAction;
begin
  SCPerform(sccmdctr, SCI_ENDUNDOACTION, 0, 0);
end;

procedure TScintilla.IndicSetStyle(indic : LongInt; style : LongInt);
begin
  SCPerform(sccmdctr, SCI_INDICSETSTYLE, indic, style);
end;

function TScintilla.IndicGetStyle(indic : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_INDICGETSTYLE, indic, 0);
end;

procedure TScintilla.IndicSetFore(indic : LongInt; fore : LongInt);
begin
  SCPerform(sccmdctr, SCI_INDICSETFORE, indic, fore);
end;

function TScintilla.IndicGetFore(indic : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_INDICGETFORE, indic, 0);
end;

procedure TScintilla.IndicSetUnder(indic : LongInt; under : LongBool);
begin
  SCPerform(sccmdctr, SCI_INDICSETUNDER, indic, LongInt(under));
end;

function TScintilla.IndicGetUnder(indic : LongInt) : LongBool;
begin
  result := LongBool(SCPerform(sccmdctr, SCI_INDICGETUNDER, indic, 0));
end;

procedure TScintilla.SetWhitespaceFore(useSetting : LongBool; fore : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETWHITESPACEFORE, LongInt(useSetting), fore);
end;

procedure TScintilla.SetWhitespaceBack(useSetting : LongBool; back : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETWHITESPACEBACK, LongInt(useSetting), back);
end;

procedure TScintilla.SetStyleBits(bits : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETSTYLEBITS, bits, 0);
end;

function TScintilla.GetStyleBits : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETSTYLEBITS, 0, 0);
end;

procedure TScintilla.SetLineState(line : LongInt; state : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETLINESTATE, line, state);
end;

function TScintilla.GetLineState(line : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETLINESTATE, line, 0);
end;

function TScintilla.GetMaxLineState : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETMAXLINESTATE, 0, 0);
end;

function TScintilla.GetCaretLineVisible : LongBool;
begin
  result := LongBool(SCPerform(sccmdctr, SCI_GETCARETLINEVISIBLE, 0, 0));
end;

procedure TScintilla.SetCaretLineVisible(show : LongBool);
begin
  SCPerform(sccmdctr, SCI_SETCARETLINEVISIBLE, LongInt(show), 0);
end;

function TScintilla.GetCaretLineBack : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETCARETLINEBACK, 0, 0);
end;

procedure TScintilla.SetCaretLineBack(back : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETCARETLINEBACK, back, 0);
end;

procedure TScintilla.StyleSetChangeable(style : LongInt; changeable : LongBool);
begin
  SCPerform(sccmdctr, SCI_STYLESETCHANGEABLE, style, LongInt(changeable));
end;

procedure TScintilla.AutoCShow(lenEntered : LongInt; itemList : PAnsiChar);
begin
  SCPerform(sccmdctr, SCI_AUTOCSHOW, lenEntered, LongInt(itemList));
end;

procedure TScintilla.AutoCCancel;
begin
  SCPerform(sccmdctr, SCI_AUTOCCANCEL, 0, 0);
end;

function TScintilla.AutoCActive : LongBool;
begin
  result := LongBool(SCPerform(sccmdctr, SCI_AUTOCACTIVE, 0, 0));
end;

function TScintilla.AutoCPosStart : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_AUTOCPOSSTART, 0, 0);
end;

procedure TScintilla.AutoCComplete;
begin
  SCPerform(sccmdctr, SCI_AUTOCCOMPLETE, 0, 0);
end;

procedure TScintilla.AutoCStops(characterSet : PAnsiChar);
begin
  SCPerform(sccmdctr, SCI_AUTOCSTOPS, 0, LongInt(characterSet));
end;

procedure TScintilla.AutoCSetSeparator(separatorCharacter : LongInt);
begin
  SCPerform(sccmdctr, SCI_AUTOCSETSEPARATOR, separatorCharacter, 0);
end;

function TScintilla.AutoCGetSeparator : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_AUTOCGETSEPARATOR, 0, 0);
end;

procedure TScintilla.AutoCSelect(text : PAnsiChar);
begin
  SCPerform(sccmdctr, SCI_AUTOCSELECT, 0, LongInt(text));
end;

procedure TScintilla.AutoCSetCancelAtStart(cancel : LongBool);
begin
  SCPerform(sccmdctr, SCI_AUTOCSETCANCELATSTART, LongInt(cancel), 0);
end;

function TScintilla.AutoCGetCancelAtStart : LongBool;
begin
  result := LongBool(SCPerform(sccmdctr, SCI_AUTOCGETCANCELATSTART, 0, 0));
end;

procedure TScintilla.AutoCSetFillUps(characterSet : PAnsiChar);
begin
  SCPerform(sccmdctr, SCI_AUTOCSETFILLUPS, 0, LongInt(characterSet));
end;

procedure TScintilla.AutoCSetChooseSingle(chooseSingle : LongBool);
begin
  SCPerform(sccmdctr, SCI_AUTOCSETCHOOSESINGLE, LongInt(chooseSingle), 0);
end;

function TScintilla.AutoCGetChooseSingle : LongBool;
begin
  result := LongBool(SCPerform(sccmdctr, SCI_AUTOCGETCHOOSESINGLE, 0, 0));
end;

procedure TScintilla.AutoCSetIgnoreCase(ignoreCase : LongBool);
begin
  SCPerform(sccmdctr, SCI_AUTOCSETIGNORECASE, LongInt(ignoreCase), 0);
end;

function TScintilla.AutoCGetIgnoreCase : LongBool;
begin
  result := LongBool(SCPerform(sccmdctr, SCI_AUTOCGETIGNORECASE, 0, 0));
end;

procedure TScintilla.UserListShow(listType : LongInt; itemList : PAnsiChar);
begin
  SCPerform(sccmdctr, SCI_USERLISTSHOW, listType, LongInt(itemList));
end;

procedure TScintilla.AutoCSetAutoHide(autoHide : LongBool);
begin
  SCPerform(sccmdctr, SCI_AUTOCSETAUTOHIDE, LongInt(autoHide), 0);
end;

function TScintilla.AutoCGetAutoHide : LongBool;
begin
  result := LongBool(SCPerform(sccmdctr, SCI_AUTOCGETAUTOHIDE, 0, 0));
end;

procedure TScintilla.AutoCSetDropRestOfWord(dropRestOfWord : LongBool);
begin
  SCPerform(sccmdctr, SCI_AUTOCSETDROPRESTOFWORD, LongInt(dropRestOfWord), 0);
end;

function TScintilla.AutoCGetDropRestOfWord : LongBool;
begin
  result := LongBool(SCPerform(sccmdctr, SCI_AUTOCGETDROPRESTOFWORD, 0, 0));
end;

procedure TScintilla.RegisterImage(atype : LongInt; xpmData : PAnsiChar);
begin
  SCPerform(sccmdctr, SCI_REGISTERIMAGE, atype, LongInt(xpmData));
end;

procedure TScintilla.ClearRegisteredImages;
begin
  SCPerform(sccmdctr, SCI_CLEARREGISTEREDIMAGES, 0, 0);
end;

function TScintilla.AutoCGetTypeSeparator : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_AUTOCGETTYPESEPARATOR, 0, 0);
end;

procedure TScintilla.AutoCSetTypeSeparator(separatorCharacter : LongInt);
begin
  SCPerform(sccmdctr, SCI_AUTOCSETTYPESEPARATOR, separatorCharacter, 0);
end;

procedure TScintilla.AutoCSetMaxWidth(characterCount : LongInt);
begin
  SCPerform(sccmdctr, SCI_AUTOCSETMAXWIDTH, characterCount, 0);
end;

function TScintilla.AutoCGetMaxWidth : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_AUTOCGETMAXWIDTH, 0, 0);
end;

procedure TScintilla.AutoCSetMaxHeight(rowCount : LongInt);
begin
  SCPerform(sccmdctr, SCI_AUTOCSETMAXHEIGHT, rowCount, 0);
end;

function TScintilla.AutoCGetMaxHeight : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_AUTOCGETMAXHEIGHT, 0, 0);
end;

procedure TScintilla.SetIndent(indentSize : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETINDENT, indentSize, 0);
end;

function TScintilla.GetIndent : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETINDENT, 0, 0);
end;

procedure TScintilla.SetUseTabs(useTabs : LongBool);
begin
  SCPerform(sccmdctr, SCI_SETUSETABS, LongInt(useTabs), 0);
end;

function TScintilla.GetUseTabs : LongBool;
begin
  result := LongBool(SCPerform(sccmdctr, SCI_GETUSETABS, 0, 0));
end;

procedure TScintilla.SetLineIndentation(line : LongInt; indentSize : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETLINEINDENTATION, line, indentSize);
end;

function TScintilla.GetLineIndentation(line : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETLINEINDENTATION, line, 0);
end;

function TScintilla.GetLineIndentPosition(line : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETLINEINDENTPOSITION, line, 0);
end;

function TScintilla.GetColumn(pos : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETCOLUMN, pos, 0);
end;

procedure TScintilla.SetHScrollBar(show : LongBool);
begin
  SCPerform(sccmdctr, SCI_SETHSCROLLBAR, LongInt(show), 0);
end;

function TScintilla.GetHScrollBar : LongBool;
begin
  result := LongBool(SCPerform(sccmdctr, SCI_GETHSCROLLBAR, 0, 0));
end;

procedure TScintilla.SetIndentationGuides(indentView : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETINDENTATIONGUIDES, indentView, 0);
end;

function TScintilla.GetIndentationGuides : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETINDENTATIONGUIDES, 0, 0);
end;

procedure TScintilla.SetHighlightGuide(column : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETHIGHLIGHTGUIDE, column, 0);
end;

function TScintilla.GetHighlightGuide : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETHIGHLIGHTGUIDE, 0, 0);
end;

function TScintilla.GetLineEndPosition(line : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETLINEENDPOSITION, line, 0);
end;

function TScintilla.GetCodePage : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETCODEPAGE, 0, 0);
end;

function TScintilla.GetCaretFore : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETCARETFORE, 0, 0);
end;

function TScintilla.GetUsePalette : LongBool;
begin
  result := LongBool(SCPerform(sccmdctr, SCI_GETUSEPALETTE, 0, 0));
end;

function TScintilla.GetReadOnly : LongBool;
begin
  result := LongBool(SCPerform(sccmdctr, SCI_GETREADONLY, 0, 0));
end;

procedure TScintilla.SetCurrentPos(pos : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETCURRENTPOS, pos, 0);
end;

procedure TScintilla.SetSelectionStart(pos : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETSELECTIONSTART, pos, 0);
end;

function TScintilla.GetSelectionStart : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETSELECTIONSTART, 0, 0);
end;

procedure TScintilla.SetSelectionEnd(pos : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETSELECTIONEND, pos, 0);
end;

function TScintilla.GetSelectionEnd : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETSELECTIONEND, 0, 0);
end;

procedure TScintilla.SetPrintMagnification(magnification : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETPRINTMAGNIFICATION, magnification, 0);
end;

function TScintilla.GetPrintMagnification : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETPRINTMAGNIFICATION, 0, 0);
end;

procedure TScintilla.SetPrintColourMode(mode : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETPRINTCOLOURMODE, mode, 0);
end;

function TScintilla.GetPrintColourMode : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETPRINTCOLOURMODE, 0, 0);
end;

function TScintilla.FindText(flags : LongInt; ft : PTextToFind) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_FINDTEXT, flags, LongInt(ft));
end;

function TScintilla.FormatRange(draw : LongBool; fr : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_FORMATRANGE, LongInt(draw), fr);
end;

function TScintilla.GetFirstVisibleLine : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETFIRSTVISIBLELINE, 0, 0);
end;

function TScintilla.GetLine(line : LongInt; text : PAnsiChar) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETLINE, line, LongInt(text));
end;

function TScintilla.GetLineCount : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETLINECOUNT, 0, 0);
end;

procedure TScintilla.SetMarginLeft(pixelWidth : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETMARGINLEFT, 0, pixelWidth);
end;

function TScintilla.GetMarginLeft : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETMARGINLEFT, 0, 0);
end;

procedure TScintilla.SetMarginRight(pixelWidth : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETMARGINRIGHT, 0, pixelWidth);
end;

function TScintilla.GetMarginRight : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETMARGINRIGHT, 0, 0);
end;

function TScintilla.GetModify : LongBool;
begin
  result := LongBool(SCPerform(sccmdctr, SCI_GETMODIFY, 0, 0));
end;

procedure TScintilla.SetSel(start : LongInt; end_ : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETSEL, start, end_);
end;

function TScintilla.GetSelText(text : PAnsiChar) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETSELTEXT, 0, LongInt(text));
end;

function TScintilla.GetTextRange(tr : PTextRange) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETTEXTRANGE, 0, LongInt(tr));
end;

procedure TScintilla.HideSelection(normal : LongBool);
begin
  SCPerform(sccmdctr, SCI_HIDESELECTION, LongInt(normal), 0);
end;

function TScintilla.PointXFromPosition(pos : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_POINTXFROMPOSITION, 0, pos);
end;

function TScintilla.PointYFromPosition(pos : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_POINTYFROMPOSITION, 0, pos);
end;

function TScintilla.LineFromPosition(pos : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_LINEFROMPOSITION, pos, 0);
end;

function TScintilla.PositionFromLine(line : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_POSITIONFROMLINE, line, 0);
end;

procedure TScintilla.LineScroll(columns : LongInt; lines : LongInt);
begin
  SCPerform(sccmdctr, SCI_LINESCROLL, columns, lines);
end;

procedure TScintilla.ScrollCaret;
begin
  SCPerform(sccmdctr, SCI_SCROLLCARET, 0, 0);
end;

procedure TScintilla.ReplaceSel(text : PAnsiChar);
begin
  SCPerform(sccmdctr, SCI_REPLACESEL, 0, LongInt(text));
end;

procedure TScintilla.SetReadOnly(readOnly : LongBool);
begin
  SCPerform(sccmdctr, SCI_SETREADONLY, LongInt(readOnly), 0);
end;

procedure TScintilla.Null;
begin
  SCPerform(sccmdctr, SCI_NULL, 0, 0);
end;

function TScintilla.CanPaste : LongBool;
begin
  result := LongBool(SCPerform(sccmdctr, SCI_CANPASTE, 0, 0));
end;

function TScintilla.CanUndo : LongBool;
begin
  result := LongBool(SCPerform(sccmdctr, SCI_CANUNDO, 0, 0));
end;

procedure TScintilla.EmptyUndoBuffer;
begin
  SCPerform(sccmdctr, SCI_EMPTYUNDOBUFFER, 0, 0);
end;

procedure TScintilla.Undo;
begin
  SCPerform(sccmdctr, SCI_UNDO, 0, 0);
end;

procedure TScintilla.Cut;
begin
  SCPerform(sccmdctr, SCI_CUT, 0, 0);
end;

procedure TScintilla.Copy;
begin
  SCPerform(sccmdctr, SCI_COPY, 0, 0);
end;

procedure TScintilla.Paste;
begin
  SCPerform(sccmdctr, SCI_PASTE, 0, 0);
end;

procedure TScintilla.Clear;
begin
  SCPerform(sccmdctr, SCI_CLEAR, 0, 0);
end;

procedure TScintilla.SetText(text : PAnsiChar);
begin
  SCPerform(sccmdctr, SCI_SETTEXT, 0, LongInt(text));
end;

function TScintilla.GetText(length : LongInt; text : PAnsiChar) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETTEXT, length, LongInt(text));
end;

function TScintilla.GetTextLength : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETTEXTLENGTH, 0, 0);
end;

function TScintilla.GetDirectFunction : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETDIRECTFUNCTION, 0, 0);
end;

function TScintilla.GetDirectPointer : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETDIRECTPOINTER, 0, 0);
end;

procedure TScintilla.SetOvertype(overtype : LongBool);
begin
  SCPerform(sccmdctr, SCI_SETOVERTYPE, LongInt(overtype), 0);
end;

function TScintilla.GetOvertype : LongBool;
begin
  result := LongBool(SCPerform(sccmdctr, SCI_GETOVERTYPE, 0, 0));
end;

procedure TScintilla.SetCaretWidth(pixelWidth : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETCARETWIDTH, pixelWidth, 0);
end;

function TScintilla.GetCaretWidth : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETCARETWIDTH, 0, 0);
end;

procedure TScintilla.SetTargetStart(pos : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETTARGETSTART, pos, 0);
end;

function TScintilla.GetTargetStart : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETTARGETSTART, 0, 0);
end;

procedure TScintilla.SetTargetEnd(pos : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETTARGETEND, pos, 0);
end;

function TScintilla.GetTargetEnd : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETTARGETEND, 0, 0);
end;

function TScintilla.ReplaceTarget(length : LongInt; text : PAnsiChar) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_REPLACETARGET, length, LongInt(text));
end;

function TScintilla.ReplaceTargetRE(length : LongInt; text : PAnsiChar) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_REPLACETARGETRE, length, LongInt(text));
end;

function TScintilla.SearchInTarget(length : LongInt; text : PAnsiChar) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_SEARCHINTARGET, length, LongInt(text));
end;

procedure TScintilla.SetSearchFlags(flags : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETSEARCHFLAGS, flags, 0);
end;

function TScintilla.GetSearchFlags : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETSEARCHFLAGS, 0, 0);
end;

procedure TScintilla.CallTipShow(pos : LongInt; definition : PAnsiChar);
begin
  SCPerform(sccmdctr, SCI_CALLTIPSHOW, pos, LongInt(definition));
end;

procedure TScintilla.CallTipCancel;
begin
  SCPerform(sccmdctr, SCI_CALLTIPCANCEL, 0, 0);
end;

function TScintilla.CallTipActive : LongBool;
begin
  result := LongBool(SCPerform(sccmdctr, SCI_CALLTIPACTIVE, 0, 0));
end;

function TScintilla.CallTipPosStart : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_CALLTIPPOSSTART, 0, 0);
end;

procedure TScintilla.CallTipSetHlt(start : LongInt; end_ : LongInt);
begin
  SCPerform(sccmdctr, SCI_CALLTIPSETHLT, start, end_);
end;

procedure TScintilla.CallTipSetBack(back : LongInt);
begin
  SCPerform(sccmdctr, SCI_CALLTIPSETBACK, back, 0);
end;

procedure TScintilla.CallTipSetFore(fore : LongInt);
begin
  SCPerform(sccmdctr, SCI_CALLTIPSETFORE, fore, 0);
end;

procedure TScintilla.CallTipSetForeHlt(fore : LongInt);
begin
  SCPerform(sccmdctr, SCI_CALLTIPSETFOREHLT, fore, 0);
end;

procedure TScintilla.CallTipUseStyle(tabSize : LongInt);
begin
  SCPerform(sccmdctr, SCI_CALLTIPUSESTYLE, tabSize, 0);
end;

function TScintilla.VisibleFromDocLine(line : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_VISIBLEFROMDOCLINE, line, 0);
end;

function TScintilla.DocLineFromVisible(lineDisplay : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_DOCLINEFROMVISIBLE, lineDisplay, 0);
end;

function TScintilla.WrapCount(line : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_WRAPCOUNT, line, 0);
end;

procedure TScintilla.SetFoldLevel(line : LongInt; level : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETFOLDLEVEL, line, level);
end;

function TScintilla.GetFoldLevel(line : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETFOLDLEVEL, line, 0);
end;

function TScintilla.GetLastChild(line : LongInt; level : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETLASTCHILD, line, level);
end;

function TScintilla.GetFoldParent(line : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETFOLDPARENT, line, 0);
end;

procedure TScintilla.ShowLines(lineStart : LongInt; lineEnd : LongInt);
begin
  SCPerform(sccmdctr, SCI_SHOWLINES, lineStart, lineEnd);
end;

procedure TScintilla.HideLines(lineStart : LongInt; lineEnd : LongInt);
begin
  SCPerform(sccmdctr, SCI_HIDELINES, lineStart, lineEnd);
end;

function TScintilla.GetLineVisible(line : LongInt) : LongBool;
begin
  result := LongBool(SCPerform(sccmdctr, SCI_GETLINEVISIBLE, line, 0));
end;

procedure TScintilla.SetFoldExpanded(line : LongInt; expanded : LongBool);
begin
  SCPerform(sccmdctr, SCI_SETFOLDEXPANDED, line, LongInt(expanded));
end;

function TScintilla.GetFoldExpanded(line : LongInt) : LongBool;
begin
  result := LongBool(SCPerform(sccmdctr, SCI_GETFOLDEXPANDED, line, 0));
end;

procedure TScintilla.ToggleFold(line : LongInt);
begin
  SCPerform(sccmdctr, SCI_TOGGLEFOLD, line, 0);
end;

procedure TScintilla.EnsureVisible(line : LongInt);
begin
  SCPerform(sccmdctr, SCI_ENSUREVISIBLE, line, 0);
end;

procedure TScintilla.SetFoldFlags(flags : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETFOLDFLAGS, flags, 0);
end;

procedure TScintilla.EnsureVisibleEnforcePolicy(line : LongInt);
begin
  SCPerform(sccmdctr, SCI_ENSUREVISIBLEENFORCEPOLICY, line, 0);
end;

procedure TScintilla.SetTabIndents(tabIndents : LongBool);
begin
  SCPerform(sccmdctr, SCI_SETTABINDENTS, LongInt(tabIndents), 0);
end;

function TScintilla.GetTabIndents : LongBool;
begin
  result := LongBool(SCPerform(sccmdctr, SCI_GETTABINDENTS, 0, 0));
end;

procedure TScintilla.SetBackSpaceUnIndents(bsUnIndents : LongBool);
begin
  SCPerform(sccmdctr, SCI_SETBACKSPACEUNINDENTS, LongInt(bsUnIndents), 0);
end;

function TScintilla.GetBackSpaceUnIndents : LongBool;
begin
  result := LongBool(SCPerform(sccmdctr, SCI_GETBACKSPACEUNINDENTS, 0, 0));
end;

procedure TScintilla.SetMouseDwellTime(periodMilliseconds : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETMOUSEDWELLTIME, periodMilliseconds, 0);
end;

function TScintilla.GetMouseDwellTime : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETMOUSEDWELLTIME, 0, 0);
end;

function TScintilla.WordStartPosition(pos : LongInt; onlyWordCharacters : LongBool) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_WORDSTARTPOSITION, pos, LongInt(onlyWordCharacters));
end;

function TScintilla.WordEndPosition(pos : LongInt; onlyWordCharacters : LongBool) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_WORDENDPOSITION, pos, LongInt(onlyWordCharacters));
end;

procedure TScintilla.SetWrapMode(mode : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETWRAPMODE, mode, 0);
end;

function TScintilla.GetWrapMode : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETWRAPMODE, 0, 0);
end;

procedure TScintilla.SetWrapVisualFlags(wrapVisualFlags : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETWRAPVISUALFLAGS, wrapVisualFlags, 0);
end;

function TScintilla.GetWrapVisualFlags : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETWRAPVISUALFLAGS, 0, 0);
end;

procedure TScintilla.SetWrapVisualFlagsLocation(wrapVisualFlagsLocation : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETWRAPVISUALFLAGSLOCATION, wrapVisualFlagsLocation, 0);
end;

function TScintilla.GetWrapVisualFlagsLocation : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETWRAPVISUALFLAGSLOCATION, 0, 0);
end;

procedure TScintilla.SetWrapStartIndent(indent : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETWRAPSTARTINDENT, indent, 0);
end;

function TScintilla.GetWrapStartIndent : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETWRAPSTARTINDENT, 0, 0);
end;

procedure TScintilla.SetWrapIndentMode(mode : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETWRAPINDENTMODE, mode, 0);
end;

function TScintilla.GetWrapIndentMode : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETWRAPINDENTMODE, 0, 0);
end;

procedure TScintilla.SetLayoutCache(mode : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETLAYOUTCACHE, mode, 0);
end;

function TScintilla.GetLayoutCache : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETLAYOUTCACHE, 0, 0);
end;

procedure TScintilla.SetScrollWidth(pixelWidth : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETSCROLLWIDTH, pixelWidth, 0);
end;

function TScintilla.GetScrollWidth : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETSCROLLWIDTH, 0, 0);
end;

procedure TScintilla.SetScrollWidthTracking(tracking : LongBool);
begin
  SCPerform(sccmdctr, SCI_SETSCROLLWIDTHTRACKING, LongInt(tracking), 0);
end;

function TScintilla.GetScrollWidthTracking : LongBool;
begin
  result := LongBool(SCPerform(sccmdctr, SCI_GETSCROLLWIDTHTRACKING, 0, 0));
end;

function TScintilla.TextWidth(style : LongInt; text : PAnsiChar) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_TEXTWIDTH, style, LongInt(text));
end;

procedure TScintilla.SetEndAtLastLine(endAtLastLine : LongBool);
begin
  SCPerform(sccmdctr, SCI_SETENDATLASTLINE, LongInt(endAtLastLine), 0);
end;

function TScintilla.GetEndAtLastLine : LongBool;
begin
  result := LongBool(SCPerform(sccmdctr, SCI_GETENDATLASTLINE, 0, 0));
end;

function TScintilla.TextHeight(line : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_TEXTHEIGHT, line, 0);
end;

procedure TScintilla.SetVScrollBar(show : LongBool);
begin
  SCPerform(sccmdctr, SCI_SETVSCROLLBAR, LongInt(show), 0);
end;

function TScintilla.GetVScrollBar : LongBool;
begin
  result := LongBool(SCPerform(sccmdctr, SCI_GETVSCROLLBAR, 0, 0));
end;

procedure TScintilla.AppendText(length : LongInt; text : PAnsiChar);
begin
  SCPerform(sccmdctr, SCI_APPENDTEXT, length, LongInt(text));
end;

function TScintilla.GetTwoPhaseDraw : LongBool;
begin
  result := LongBool(SCPerform(sccmdctr, SCI_GETTWOPHASEDRAW, 0, 0));
end;

procedure TScintilla.SetTwoPhaseDraw(twoPhase : LongBool);
begin
  SCPerform(sccmdctr, SCI_SETTWOPHASEDRAW, LongInt(twoPhase), 0);
end;

procedure TScintilla.TargetFromSelection;
begin
  SCPerform(sccmdctr, SCI_TARGETFROMSELECTION, 0, 0);
end;

procedure TScintilla.LinesJoin;
begin
  SCPerform(sccmdctr, SCI_LINESJOIN, 0, 0);
end;

procedure TScintilla.LinesSplit(pixelWidth : LongInt);
begin
  SCPerform(sccmdctr, SCI_LINESSPLIT, pixelWidth, 0);
end;

procedure TScintilla.SetFoldMarginColour(useSetting : LongBool; back : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETFOLDMARGINCOLOUR, LongInt(useSetting), back);
end;

procedure TScintilla.SetFoldMarginHiColour(useSetting : LongBool; fore : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETFOLDMARGINHICOLOUR, LongInt(useSetting), fore);
end;

procedure TScintilla.LineDown;
begin
  SCPerform(sccmdctr, SCI_LINEDOWN, 0, 0);
end;

procedure TScintilla.LineDownExtend;
begin
  SCPerform(sccmdctr, SCI_LINEDOWNEXTEND, 0, 0);
end;

procedure TScintilla.LineUp;
begin
  SCPerform(sccmdctr, SCI_LINEUP, 0, 0);
end;

procedure TScintilla.LineUpExtend;
begin
  SCPerform(sccmdctr, SCI_LINEUPEXTEND, 0, 0);
end;

procedure TScintilla.CharLeft;
begin
  SCPerform(sccmdctr, SCI_CHARLEFT, 0, 0);
end;

procedure TScintilla.CharLeftExtend;
begin
  SCPerform(sccmdctr, SCI_CHARLEFTEXTEND, 0, 0);
end;

procedure TScintilla.CharRight;
begin
  SCPerform(sccmdctr, SCI_CHARRIGHT, 0, 0);
end;

procedure TScintilla.CharRightExtend;
begin
  SCPerform(sccmdctr, SCI_CHARRIGHTEXTEND, 0, 0);
end;

procedure TScintilla.WordLeft;
begin
  SCPerform(sccmdctr, SCI_WORDLEFT, 0, 0);
end;

procedure TScintilla.WordLeftExtend;
begin
  SCPerform(sccmdctr, SCI_WORDLEFTEXTEND, 0, 0);
end;

procedure TScintilla.WordRight;
begin
  SCPerform(sccmdctr, SCI_WORDRIGHT, 0, 0);
end;

procedure TScintilla.WordRightExtend;
begin
  SCPerform(sccmdctr, SCI_WORDRIGHTEXTEND, 0, 0);
end;

procedure TScintilla.Home;
begin
  SCPerform(sccmdctr, SCI_HOME, 0, 0);
end;

procedure TScintilla.HomeExtend;
begin
  SCPerform(sccmdctr, SCI_HOMEEXTEND, 0, 0);
end;

procedure TScintilla.LineEnd;
begin
  SCPerform(sccmdctr, SCI_LINEEND, 0, 0);
end;

procedure TScintilla.LineEndExtend;
begin
  SCPerform(sccmdctr, SCI_LINEENDEXTEND, 0, 0);
end;

procedure TScintilla.DocumentStart;
begin
  SCPerform(sccmdctr, SCI_DOCUMENTSTART, 0, 0);
end;

procedure TScintilla.DocumentStartExtend;
begin
  SCPerform(sccmdctr, SCI_DOCUMENTSTARTEXTEND, 0, 0);
end;

procedure TScintilla.DocumentEnd;
begin
  SCPerform(sccmdctr, SCI_DOCUMENTEND, 0, 0);
end;

procedure TScintilla.DocumentEndExtend;
begin
  SCPerform(sccmdctr, SCI_DOCUMENTENDEXTEND, 0, 0);
end;

procedure TScintilla.PageUp;
begin
  SCPerform(sccmdctr, SCI_PAGEUP, 0, 0);
end;

procedure TScintilla.PageUpExtend;
begin
  SCPerform(sccmdctr, SCI_PAGEUPEXTEND, 0, 0);
end;

procedure TScintilla.PageDown;
begin
  SCPerform(sccmdctr, SCI_PAGEDOWN, 0, 0);
end;

procedure TScintilla.PageDownExtend;
begin
  SCPerform(sccmdctr, SCI_PAGEDOWNEXTEND, 0, 0);
end;

procedure TScintilla.EditToggleOvertype;
begin
  SCPerform(sccmdctr, SCI_EDITTOGGLEOVERTYPE, 0, 0);
end;

procedure TScintilla.Cancel;
begin
  SCPerform(sccmdctr, SCI_CANCEL, 0, 0);
end;

procedure TScintilla.DeleteBack;
begin
  SCPerform(sccmdctr, SCI_DELETEBACK, 0, 0);
end;

procedure TScintilla.Tab;
begin
  SCPerform(sccmdctr, SCI_TAB, 0, 0);
end;

procedure TScintilla.BackTab;
begin
  SCPerform(sccmdctr, SCI_BACKTAB, 0, 0);
end;

procedure TScintilla.NewLine;
begin
  SCPerform(sccmdctr, SCI_NEWLINE, 0, 0);
end;

procedure TScintilla.FormFeed;
begin
  SCPerform(sccmdctr, SCI_FORMFEED, 0, 0);
end;

procedure TScintilla.VCHome;
begin
  SCPerform(sccmdctr, SCI_VCHOME, 0, 0);
end;

procedure TScintilla.VCHomeExtend;
begin
  SCPerform(sccmdctr, SCI_VCHOMEEXTEND, 0, 0);
end;

procedure TScintilla.ZoomIn;
begin
  SCPerform(sccmdctr, SCI_ZOOMIN, 0, 0);
end;

procedure TScintilla.ZoomOut;
begin
  SCPerform(sccmdctr, SCI_ZOOMOUT, 0, 0);
end;

procedure TScintilla.DelWordLeft;
begin
  SCPerform(sccmdctr, SCI_DELWORDLEFT, 0, 0);
end;

procedure TScintilla.DelWordRight;
begin
  SCPerform(sccmdctr, SCI_DELWORDRIGHT, 0, 0);
end;

procedure TScintilla.DelWordRightEnd;
begin
  SCPerform(sccmdctr, SCI_DELWORDRIGHTEND, 0, 0);
end;

procedure TScintilla.LineCut;
begin
  SCPerform(sccmdctr, SCI_LINECUT, 0, 0);
end;

procedure TScintilla.LineDelete;
begin
  SCPerform(sccmdctr, SCI_LINEDELETE, 0, 0);
end;

procedure TScintilla.LineTranspose;
begin
  SCPerform(sccmdctr, SCI_LINETRANSPOSE, 0, 0);
end;

procedure TScintilla.LineDuplicate;
begin
  SCPerform(sccmdctr, SCI_LINEDUPLICATE, 0, 0);
end;

procedure TScintilla.LowerCase;
begin
  SCPerform(sccmdctr, SCI_LOWERCASE, 0, 0);
end;

procedure TScintilla.UpperCase;
begin
  SCPerform(sccmdctr, SCI_UPPERCASE, 0, 0);
end;

procedure TScintilla.LineScrollDown;
begin
  SCPerform(sccmdctr, SCI_LINESCROLLDOWN, 0, 0);
end;

procedure TScintilla.LineScrollUp;
begin
  SCPerform(sccmdctr, SCI_LINESCROLLUP, 0, 0);
end;

procedure TScintilla.DeleteBackNotLine;
begin
  SCPerform(sccmdctr, SCI_DELETEBACKNOTLINE, 0, 0);
end;

procedure TScintilla.HomeDisplay;
begin
  SCPerform(sccmdctr, SCI_HOMEDISPLAY, 0, 0);
end;

procedure TScintilla.HomeDisplayExtend;
begin
  SCPerform(sccmdctr, SCI_HOMEDISPLAYEXTEND, 0, 0);
end;

procedure TScintilla.LineEndDisplay;
begin
  SCPerform(sccmdctr, SCI_LINEENDDISPLAY, 0, 0);
end;

procedure TScintilla.LineEndDisplayExtend;
begin
  SCPerform(sccmdctr, SCI_LINEENDDISPLAYEXTEND, 0, 0);
end;

procedure TScintilla.HomeWrap;
begin
  SCPerform(sccmdctr, SCI_HOMEWRAP, 0, 0);
end;

procedure TScintilla.HomeWrapExtend;
begin
  SCPerform(sccmdctr, SCI_HOMEWRAPEXTEND, 0, 0);
end;

procedure TScintilla.LineEndWrap;
begin
  SCPerform(sccmdctr, SCI_LINEENDWRAP, 0, 0);
end;

procedure TScintilla.LineEndWrapExtend;
begin
  SCPerform(sccmdctr, SCI_LINEENDWRAPEXTEND, 0, 0);
end;

procedure TScintilla.VCHomeWrap;
begin
  SCPerform(sccmdctr, SCI_VCHOMEWRAP, 0, 0);
end;

procedure TScintilla.VCHomeWrapExtend;
begin
  SCPerform(sccmdctr, SCI_VCHOMEWRAPEXTEND, 0, 0);
end;

procedure TScintilla.LineCopy;
begin
  SCPerform(sccmdctr, SCI_LINECOPY, 0, 0);
end;

procedure TScintilla.MoveCaretInsideView;
begin
  SCPerform(sccmdctr, SCI_MOVECARETINSIDEVIEW, 0, 0);
end;

function TScintilla.LineLength(line : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_LINELENGTH, line, 0);
end;

procedure TScintilla.BraceHighlight(pos1 : LongInt; pos2 : LongInt);
begin
  SCPerform(sccmdctr, SCI_BRACEHIGHLIGHT, pos1, pos2);
end;

procedure TScintilla.BraceBadLight(pos : LongInt);
begin
  SCPerform(sccmdctr, SCI_BRACEBADLIGHT, pos, 0);
end;

function TScintilla.BraceMatch(pos : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_BRACEMATCH, pos, 0);
end;

function TScintilla.GetViewEOL : LongBool;
begin
  result := LongBool(SCPerform(sccmdctr, SCI_GETVIEWEOL, 0, 0));
end;

procedure TScintilla.SetViewEOL(visible : LongBool);
begin
  SCPerform(sccmdctr, SCI_SETVIEWEOL, LongInt(visible), 0);
end;

function TScintilla.GetDocPointer : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETDOCPOINTER, 0, 0);
end;

procedure TScintilla.SetDocPointer(pointer : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETDOCPOINTER, 0, pointer);
end;

procedure TScintilla.SetModEventMask(mask : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETMODEVENTMASK, mask, 0);
end;

function TScintilla.GetEdgeColumn : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETEDGECOLUMN, 0, 0);
end;

procedure TScintilla.SetEdgeColumn(column : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETEDGECOLUMN, column, 0);
end;

function TScintilla.GetEdgeMode : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETEDGEMODE, 0, 0);
end;

procedure TScintilla.SetEdgeMode(mode : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETEDGEMODE, mode, 0);
end;

function TScintilla.GetEdgeColour : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETEDGECOLOUR, 0, 0);
end;

procedure TScintilla.SetEdgeColour(edgeColour : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETEDGECOLOUR, edgeColour, 0);
end;

procedure TScintilla.SearchAnchor;
begin
  SCPerform(sccmdctr, SCI_SEARCHANCHOR, 0, 0);
end;

function TScintilla.SearchNext(flags : LongInt; text : PAnsiChar) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_SEARCHNEXT, flags, LongInt(text));
end;

function TScintilla.SearchPrev(flags : LongInt; text : PAnsiChar) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_SEARCHPREV, flags, LongInt(text));
end;

function TScintilla.LinesOnScreen : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_LINESONSCREEN, 0, 0);
end;

procedure TScintilla.UsePopUp(allowPopUp : LongBool);
begin
  SCPerform(sccmdctr, SCI_USEPOPUP, LongInt(allowPopUp), 0);
end;

function TScintilla.SelectionIsRectangle : LongBool;
begin
  result := LongBool(SCPerform(sccmdctr, SCI_SELECTIONISRECTANGLE, 0, 0));
end;

procedure TScintilla.SetZoom(zoom : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETZOOM, zoom, 0);
end;

function TScintilla.GetZoom : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETZOOM, 0, 0);
end;

function TScintilla.CreateDocument : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_CREATEDOCUMENT, 0, 0);
end;

procedure TScintilla.AddRefDocument(doc : LongInt);
begin
  SCPerform(sccmdctr, SCI_ADDREFDOCUMENT, 0, doc);
end;

procedure TScintilla.ReleaseDocument(doc : LongInt);
begin
  SCPerform(sccmdctr, SCI_RELEASEDOCUMENT, 0, doc);
end;

function TScintilla.GetModEventMask : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETMODEVENTMASK, 0, 0);
end;

procedure TScintilla.SetFocusEx(focus : LongBool);
begin
  SCPerform(sccmdctr, SCI_SETFOCUSEX, LongInt(focus), 0);
end;

function TScintilla.GetFocus : LongBool;
begin
  result := LongBool(SCPerform(sccmdctr, SCI_GETFOCUS, 0, 0));
end;

procedure TScintilla.SetStatus(statusCode : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETSTATUS, statusCode, 0);
end;

function TScintilla.GetStatus : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETSTATUS, 0, 0);
end;

procedure TScintilla.SetMouseDownCaptures(captures : LongBool);
begin
  SCPerform(sccmdctr, SCI_SETMOUSEDOWNCAPTURES, LongInt(captures), 0);
end;

function TScintilla.GetMouseDownCaptures : LongBool;
begin
  result := LongBool(SCPerform(sccmdctr, SCI_GETMOUSEDOWNCAPTURES, 0, 0));
end;

procedure TScintilla.SetCursor(cursorType : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETCURSOR, cursorType, 0);
end;

function TScintilla.GetCursor : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETCURSOR, 0, 0);
end;

procedure TScintilla.SetControlCharSymbol(symbol : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETCONTROLCHARSYMBOL, symbol, 0);
end;

function TScintilla.GetControlCharSymbol : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETCONTROLCHARSYMBOL, 0, 0);
end;

procedure TScintilla.WordPartLeft;
begin
  SCPerform(sccmdctr, SCI_WORDPARTLEFT, 0, 0);
end;

procedure TScintilla.WordPartLeftExtend;
begin
  SCPerform(sccmdctr, SCI_WORDPARTLEFTEXTEND, 0, 0);
end;

procedure TScintilla.WordPartRight;
begin
  SCPerform(sccmdctr, SCI_WORDPARTRIGHT, 0, 0);
end;

procedure TScintilla.WordPartRightExtend;
begin
  SCPerform(sccmdctr, SCI_WORDPARTRIGHTEXTEND, 0, 0);
end;

procedure TScintilla.SetVisiblePolicy(visiblePolicy : LongInt; visibleSlop : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETVISIBLEPOLICY, visiblePolicy, visibleSlop);
end;

procedure TScintilla.DelLineLeft;
begin
  SCPerform(sccmdctr, SCI_DELLINELEFT, 0, 0);
end;

procedure TScintilla.DelLineRight;
begin
  SCPerform(sccmdctr, SCI_DELLINERIGHT, 0, 0);
end;

procedure TScintilla.SetXOffset(newOffset : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETXOFFSET, newOffset, 0);
end;

function TScintilla.GetXOffset : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETXOFFSET, 0, 0);
end;

procedure TScintilla.ChooseCaretX;
begin
  SCPerform(sccmdctr, SCI_CHOOSECARETX, 0, 0);
end;

procedure TScintilla.GrabFocus;
begin
  SCPerform(sccmdctr, SCI_GRABFOCUS, 0, 0);
end;

procedure TScintilla.SetXCaretPolicy(caretPolicy : LongInt; caretSlop : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETXCARETPOLICY, caretPolicy, caretSlop);
end;

procedure TScintilla.SetYCaretPolicy(caretPolicy : LongInt; caretSlop : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETYCARETPOLICY, caretPolicy, caretSlop);
end;

procedure TScintilla.SetPrintWrapMode(mode : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETPRINTWRAPMODE, mode, 0);
end;

function TScintilla.GetPrintWrapMode : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETPRINTWRAPMODE, 0, 0);
end;

procedure TScintilla.SetHotspotActiveFore(useSetting : LongBool; fore : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETHOTSPOTACTIVEFORE, LongInt(useSetting), fore);
end;

function TScintilla.GetHotspotActiveFore : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETHOTSPOTACTIVEFORE, 0, 0);
end;

procedure TScintilla.SetHotspotActiveBack(useSetting : LongBool; back : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETHOTSPOTACTIVEBACK, LongInt(useSetting), back);
end;

function TScintilla.GetHotspotActiveBack : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETHOTSPOTACTIVEBACK, 0, 0);
end;

procedure TScintilla.SetHotspotActiveUnderline(underline : LongBool);
begin
  SCPerform(sccmdctr, SCI_SETHOTSPOTACTIVEUNDERLINE, LongInt(underline), 0);
end;

function TScintilla.GetHotspotActiveUnderline : LongBool;
begin
  result := LongBool(SCPerform(sccmdctr, SCI_GETHOTSPOTACTIVEUNDERLINE, 0, 0));
end;

procedure TScintilla.SetHotspotSingleLine(singleLine : LongBool);
begin
  SCPerform(sccmdctr, SCI_SETHOTSPOTSINGLELINE, LongInt(singleLine), 0);
end;

function TScintilla.GetHotspotSingleLine : LongBool;
begin
  result := LongBool(SCPerform(sccmdctr, SCI_GETHOTSPOTSINGLELINE, 0, 0));
end;

procedure TScintilla.ParaDown;
begin
  SCPerform(sccmdctr, SCI_PARADOWN, 0, 0);
end;

procedure TScintilla.ParaDownExtend;
begin
  SCPerform(sccmdctr, SCI_PARADOWNEXTEND, 0, 0);
end;

procedure TScintilla.ParaUp;
begin
  SCPerform(sccmdctr, SCI_PARAUP, 0, 0);
end;

procedure TScintilla.ParaUpExtend;
begin
  SCPerform(sccmdctr, SCI_PARAUPEXTEND, 0, 0);
end;

function TScintilla.PositionBefore(pos : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_POSITIONBEFORE, pos, 0);
end;

function TScintilla.PositionAfter(pos : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_POSITIONAFTER, pos, 0);
end;

procedure TScintilla.CopyRange(start : LongInt; end_ : LongInt);
begin
  SCPerform(sccmdctr, SCI_COPYRANGE, start, end_);
end;

procedure TScintilla.CopyText(length : LongInt; text : PAnsiChar);
begin
  SCPerform(sccmdctr, SCI_COPYTEXT, length, LongInt(text));
end;

procedure TScintilla.SetSelectionMode(mode : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETSELECTIONMODE, mode, 0);
end;

function TScintilla.GetSelectionMode : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETSELECTIONMODE, 0, 0);
end;

function TScintilla.GetLineSelStartPosition(line : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETLINESELSTARTPOSITION, line, 0);
end;

function TScintilla.GetLineSelEndPosition(line : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETLINESELENDPOSITION, line, 0);
end;

procedure TScintilla.LineDownRectExtend;
begin
  SCPerform(sccmdctr, SCI_LINEDOWNRECTEXTEND, 0, 0);
end;

procedure TScintilla.LineUpRectExtend;
begin
  SCPerform(sccmdctr, SCI_LINEUPRECTEXTEND, 0, 0);
end;

procedure TScintilla.CharLeftRectExtend;
begin
  SCPerform(sccmdctr, SCI_CHARLEFTRECTEXTEND, 0, 0);
end;

procedure TScintilla.CharRightRectExtend;
begin
  SCPerform(sccmdctr, SCI_CHARRIGHTRECTEXTEND, 0, 0);
end;

procedure TScintilla.HomeRectExtend;
begin
  SCPerform(sccmdctr, SCI_HOMERECTEXTEND, 0, 0);
end;

procedure TScintilla.VCHomeRectExtend;
begin
  SCPerform(sccmdctr, SCI_VCHOMERECTEXTEND, 0, 0);
end;

procedure TScintilla.LineEndRectExtend;
begin
  SCPerform(sccmdctr, SCI_LINEENDRECTEXTEND, 0, 0);
end;

procedure TScintilla.PageUpRectExtend;
begin
  SCPerform(sccmdctr, SCI_PAGEUPRECTEXTEND, 0, 0);
end;

procedure TScintilla.PageDownRectExtend;
begin
  SCPerform(sccmdctr, SCI_PAGEDOWNRECTEXTEND, 0, 0);
end;

procedure TScintilla.StutteredPageUp;
begin
  SCPerform(sccmdctr, SCI_STUTTEREDPAGEUP, 0, 0);
end;

procedure TScintilla.StutteredPageUpExtend;
begin
  SCPerform(sccmdctr, SCI_STUTTEREDPAGEUPEXTEND, 0, 0);
end;

procedure TScintilla.StutteredPageDown;
begin
  SCPerform(sccmdctr, SCI_STUTTEREDPAGEDOWN, 0, 0);
end;

procedure TScintilla.StutteredPageDownExtend;
begin
  SCPerform(sccmdctr, SCI_STUTTEREDPAGEDOWNEXTEND, 0, 0);
end;

procedure TScintilla.WordLeftEnd;
begin
  SCPerform(sccmdctr, SCI_WORDLEFTEND, 0, 0);
end;

procedure TScintilla.WordLeftEndExtend;
begin
  SCPerform(sccmdctr, SCI_WORDLEFTENDEXTEND, 0, 0);
end;

procedure TScintilla.WordRightEnd;
begin
  SCPerform(sccmdctr, SCI_WORDRIGHTEND, 0, 0);
end;

procedure TScintilla.WordRightEndExtend;
begin
  SCPerform(sccmdctr, SCI_WORDRIGHTENDEXTEND, 0, 0);
end;

procedure TScintilla.SetWhitespaceChars(characters : PAnsiChar);
begin
  SCPerform(sccmdctr, SCI_SETWHITESPACECHARS, 0, LongInt(characters));
end;

procedure TScintilla.SetCharsDefault;
begin
  SCPerform(sccmdctr, SCI_SETCHARSDEFAULT, 0, 0);
end;

function TScintilla.AutoCGetCurrent : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_AUTOCGETCURRENT, 0, 0);
end;

procedure TScintilla.Allocate(bytes : LongInt);
begin
  SCPerform(sccmdctr, SCI_ALLOCATE, bytes, 0);
end;

function TScintilla.TargetAsUTF8(s : PAnsiChar) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_TARGETASUTF8, 0, LongInt(s));
end;

procedure TScintilla.SetLengthForEncode(bytes : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETLENGTHFORENCODE, bytes, 0);
end;

function TScintilla.EncodedFromUTF8(utf8 : PAnsiChar; encoded : PAnsiChar) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_ENCODEDFROMUTF8, LongInt(utf8), LongInt(encoded));
end;

function TScintilla.FindColumn(line : LongInt; column : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_FINDCOLUMN, line, column);
end;

function TScintilla.GetCaretSticky : LongBool;
begin
  result := LongBool(SCPerform(sccmdctr, SCI_GETCARETSTICKY, 0, 0));
end;

procedure TScintilla.SetCaretSticky(useCaretStickyBehaviour : LongBool);
begin
  SCPerform(sccmdctr, SCI_SETCARETSTICKY, LongInt(useCaretStickyBehaviour), 0);
end;

procedure TScintilla.ToggleCaretSticky;
begin
  SCPerform(sccmdctr, SCI_TOGGLECARETSTICKY, 0, 0);
end;

procedure TScintilla.SetPasteConvertEndings(convert : LongBool);
begin
  SCPerform(sccmdctr, SCI_SETPASTECONVERTENDINGS, LongInt(convert), 0);
end;

function TScintilla.GetPasteConvertEndings : LongBool;
begin
  result := LongBool(SCPerform(sccmdctr, SCI_GETPASTECONVERTENDINGS, 0, 0));
end;

procedure TScintilla.SelectionDuplicate;
begin
  SCPerform(sccmdctr, SCI_SELECTIONDUPLICATE, 0, 0);
end;

procedure TScintilla.SetCaretLineBackAlpha(alpha : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETCARETLINEBACKALPHA, alpha, 0);
end;

function TScintilla.GetCaretLineBackAlpha : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETCARETLINEBACKALPHA, 0, 0);
end;

procedure TScintilla.SetCaretStyle(caretStyle : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETCARETSTYLE, caretStyle, 0);
end;

function TScintilla.GetCaretStyle : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETCARETSTYLE, 0, 0);
end;

procedure TScintilla.SetIndicatorCurrent(indicator : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETINDICATORCURRENT, indicator, 0);
end;

function TScintilla.GetIndicatorCurrent : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETINDICATORCURRENT, 0, 0);
end;

procedure TScintilla.SetIndicatorValue(value : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETINDICATORVALUE, value, 0);
end;

function TScintilla.GetIndicatorValue : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETINDICATORVALUE, 0, 0);
end;

procedure TScintilla.IndicatorFillRange(position : LongInt; fillLength : LongInt);
begin
  SCPerform(sccmdctr, SCI_INDICATORFILLRANGE, position, fillLength);
end;

procedure TScintilla.IndicatorClearRange(position : LongInt; clearLength : LongInt);
begin
  SCPerform(sccmdctr, SCI_INDICATORCLEARRANGE, position, clearLength);
end;

function TScintilla.IndicatorAllOnFor(position : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_INDICATORALLONFOR, position, 0);
end;

function TScintilla.IndicatorValueAt(indicator : LongInt; position : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_INDICATORVALUEAT, indicator, position);
end;

function TScintilla.IndicatorStart(indicator : LongInt; position : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_INDICATORSTART, indicator, position);
end;

function TScintilla.IndicatorEnd(indicator : LongInt; position : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_INDICATOREND, indicator, position);
end;

procedure TScintilla.SetPositionCache(size : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETPOSITIONCACHE, size, 0);
end;

function TScintilla.GetPositionCache : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETPOSITIONCACHE, 0, 0);
end;

procedure TScintilla.CopyAllowLine;
begin
  SCPerform(sccmdctr, SCI_COPYALLOWLINE, 0, 0);
end;

function TScintilla.GetCharacterPointer : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETCHARACTERPOINTER, 0, 0);
end;

procedure TScintilla.SetKeysUnicode(keysUnicode : LongBool);
begin
  SCPerform(sccmdctr, SCI_SETKEYSUNICODE, LongInt(keysUnicode), 0);
end;

function TScintilla.GetKeysUnicode : LongBool;
begin
  result := LongBool(SCPerform(sccmdctr, SCI_GETKEYSUNICODE, 0, 0));
end;

procedure TScintilla.IndicSetAlpha(indicator : LongInt; alpha : LongInt);
begin
  SCPerform(sccmdctr, SCI_INDICSETALPHA, indicator, alpha);
end;

function TScintilla.IndicGetAlpha(indicator : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_INDICGETALPHA, indicator, 0);
end;

procedure TScintilla.SetExtraAscent(extraAscent : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETEXTRAASCENT, extraAscent, 0);
end;

function TScintilla.GetExtraAscent : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETEXTRAASCENT, 0, 0);
end;

procedure TScintilla.SetExtraDescent(extraDescent : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETEXTRADESCENT, extraDescent, 0);
end;

function TScintilla.GetExtraDescent : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETEXTRADESCENT, 0, 0);
end;

function TScintilla.MarkerSymbolDefined(markerNumber : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_MARKERSYMBOLDEFINED, markerNumber, 0);
end;

procedure TScintilla.MarginSetText(line : LongInt; text : PAnsiChar);
begin
  SCPerform(sccmdctr, SCI_MARGINSETTEXT, line, LongInt(text));
end;

function TScintilla.MarginGetText(line : LongInt; text : PAnsiChar) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_MARGINGETTEXT, line, LongInt(text));
end;

procedure TScintilla.MarginSetStyle(line : LongInt; style : LongInt);
begin
  SCPerform(sccmdctr, SCI_MARGINSETSTYLE, line, style);
end;

function TScintilla.MarginGetStyle(line : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_MARGINGETSTYLE, line, 0);
end;

procedure TScintilla.MarginSetStyles(line : LongInt; styles : PAnsiChar);
begin
  SCPerform(sccmdctr, SCI_MARGINSETSTYLES, line, LongInt(styles));
end;

function TScintilla.MarginGetStyles(line : LongInt; styles : PAnsiChar) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_MARGINGETSTYLES, line, LongInt(styles));
end;

procedure TScintilla.MarginTextClearAll;
begin
  SCPerform(sccmdctr, SCI_MARGINTEXTCLEARALL, 0, 0);
end;

procedure TScintilla.MarginSetStyleOffset(style : LongInt);
begin
  SCPerform(sccmdctr, SCI_MARGINSETSTYLEOFFSET, style, 0);
end;

function TScintilla.MarginGetStyleOffset : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_MARGINGETSTYLEOFFSET, 0, 0);
end;

procedure TScintilla.AnnotationSetText(line : LongInt; text : PAnsiChar);
begin
  SCPerform(sccmdctr, SCI_ANNOTATIONSETTEXT, line, LongInt(text));
end;

function TScintilla.AnnotationGetText(line : LongInt; text : PAnsiChar) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_ANNOTATIONGETTEXT, line, LongInt(text));
end;

procedure TScintilla.AnnotationSetStyle(line : LongInt; style : LongInt);
begin
  SCPerform(sccmdctr, SCI_ANNOTATIONSETSTYLE, line, style);
end;

function TScintilla.AnnotationGetStyle(line : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_ANNOTATIONGETSTYLE, line, 0);
end;

procedure TScintilla.AnnotationSetStyles(line : LongInt; styles : PAnsiChar);
begin
  SCPerform(sccmdctr, SCI_ANNOTATIONSETSTYLES, line, LongInt(styles));
end;

function TScintilla.AnnotationGetStyles(line : LongInt; styles : PAnsiChar) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_ANNOTATIONGETSTYLES, line, LongInt(styles));
end;

function TScintilla.AnnotationGetLines(line : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_ANNOTATIONGETLINES, line, 0);
end;

procedure TScintilla.AnnotationClearAll;
begin
  SCPerform(sccmdctr, SCI_ANNOTATIONCLEARALL, 0, 0);
end;

procedure TScintilla.AnnotationSetVisible(visible : LongInt);
begin
  SCPerform(sccmdctr, SCI_ANNOTATIONSETVISIBLE, visible, 0);
end;

function TScintilla.AnnotationGetVisible : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_ANNOTATIONGETVISIBLE, 0, 0);
end;

procedure TScintilla.AnnotationSetStyleOffset(style : LongInt);
begin
  SCPerform(sccmdctr, SCI_ANNOTATIONSETSTYLEOFFSET, style, 0);
end;

function TScintilla.AnnotationGetStyleOffset : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_ANNOTATIONGETSTYLEOFFSET, 0, 0);
end;

procedure TScintilla.AddUndoAction(token : LongInt; flags : LongInt);
begin
  SCPerform(sccmdctr, SCI_ADDUNDOACTION, token, flags);
end;

function TScintilla.CharPositionFromPoint(x : LongInt; y : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_CHARPOSITIONFROMPOINT, x, y);
end;

function TScintilla.CharPositionFromPointClose(x : LongInt; y : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_CHARPOSITIONFROMPOINTCLOSE, x, y);
end;

procedure TScintilla.SetMultipleSelection(multipleSelection : LongBool);
begin
  SCPerform(sccmdctr, SCI_SETMULTIPLESELECTION, LongInt(multipleSelection), 0);
end;

function TScintilla.GetMultipleSelection : LongBool;
begin
  result := LongBool(SCPerform(sccmdctr, SCI_GETMULTIPLESELECTION, 0, 0));
end;

procedure TScintilla.SetAdditionalSelectionTyping(additionalSelectionTyping : LongBool);
begin
  SCPerform(sccmdctr, SCI_SETADDITIONALSELECTIONTYPING, LongInt(additionalSelectionTyping), 0);
end;

function TScintilla.GetAdditionalSelectionTyping : LongBool;
begin
  result := LongBool(SCPerform(sccmdctr, SCI_GETADDITIONALSELECTIONTYPING, 0, 0));
end;

procedure TScintilla.SetAdditionalCaretsBlink(additionalCaretsBlink : LongBool);
begin
  SCPerform(sccmdctr, SCI_SETADDITIONALCARETSBLINK, LongInt(additionalCaretsBlink), 0);
end;

function TScintilla.GetAdditionalCaretsBlink : LongBool;
begin
  result := LongBool(SCPerform(sccmdctr, SCI_GETADDITIONALCARETSBLINK, 0, 0));
end;

function TScintilla.GetSelections : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETSELECTIONS, 0, 0);
end;

procedure TScintilla.ClearSelections;
begin
  SCPerform(sccmdctr, SCI_CLEARSELECTIONS, 0, 0);
end;

function TScintilla.SetSelection(caret : LongInt; anchor : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_SETSELECTION, caret, anchor);
end;

function TScintilla.AddSelection(caret : LongInt; anchor : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_ADDSELECTION, caret, anchor);
end;

procedure TScintilla.SetMainSelection(selection : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETMAINSELECTION, selection, 0);
end;

function TScintilla.GetMainSelection : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETMAINSELECTION, 0, 0);
end;

procedure TScintilla.SetSelectionNCaret(selection : LongInt; pos : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETSELECTIONNCARET, selection, pos);
end;

function TScintilla.GetSelectionNCaret(selection : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETSELECTIONNCARET, selection, 0);
end;

procedure TScintilla.SetSelectionNAnchor(selection : LongInt; posAnchor : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETSELECTIONNANCHOR, selection, posAnchor);
end;

function TScintilla.GetSelectionNAnchor(selection : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETSELECTIONNANCHOR, selection, 0);
end;

procedure TScintilla.SetSelectionNCaretVirtualSpace(selection : LongInt; space : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETSELECTIONNCARETVIRTUALSPACE, selection, space);
end;

function TScintilla.GetSelectionNCaretVirtualSpace(selection : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETSELECTIONNCARETVIRTUALSPACE, selection, 0);
end;

procedure TScintilla.SetSelectionNAnchorVirtualSpace(selection : LongInt; space : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETSELECTIONNANCHORVIRTUALSPACE, selection, space);
end;

function TScintilla.GetSelectionNAnchorVirtualSpace(selection : LongInt) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETSELECTIONNANCHORVIRTUALSPACE, selection, 0);
end;

procedure TScintilla.SetSelectionNStart(selection : LongInt; pos : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETSELECTIONNSTART, selection, pos);
end;

function TScintilla.GetSelectionNStart : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETSELECTIONNSTART, 0, 0);
end;

procedure TScintilla.SetSelectionNEnd(selection : LongInt; pos : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETSELECTIONNEND, selection, pos);
end;

function TScintilla.GetSelectionNEnd : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETSELECTIONNEND, 0, 0);
end;

procedure TScintilla.SetRectangularSelectionCaret(pos : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETRECTANGULARSELECTIONCARET, pos, 0);
end;

function TScintilla.GetRectangularSelectionCaret : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETRECTANGULARSELECTIONCARET, 0, 0);
end;

procedure TScintilla.SetRectangularSelectionAnchor(posAnchor : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETRECTANGULARSELECTIONANCHOR, posAnchor, 0);
end;

function TScintilla.GetRectangularSelectionAnchor : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETRECTANGULARSELECTIONANCHOR, 0, 0);
end;

procedure TScintilla.SetRectangularSelectionCaretVirtualSpace(space : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETRECTANGULARSELECTIONCARETVIRTUALSPACE, space, 0);
end;

function TScintilla.GetRectangularSelectionCaretVirtualSpace : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETRECTANGULARSELECTIONCARETVIRTUALSPACE, 0, 0);
end;

procedure TScintilla.SetRectangularSelectionAnchorVirtualSpace(space : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETRECTANGULARSELECTIONANCHORVIRTUALSPACE, space, 0);
end;

function TScintilla.GetRectangularSelectionAnchorVirtualSpace : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETRECTANGULARSELECTIONANCHORVIRTUALSPACE, 0, 0);
end;

procedure TScintilla.SetVirtualSpaceOptions(virtualSpaceOptions : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETVIRTUALSPACEOPTIONS, virtualSpaceOptions, 0);
end;

function TScintilla.GetVirtualSpaceOptions : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETVIRTUALSPACEOPTIONS, 0, 0);
end;

procedure TScintilla.SetRectangularSelectionModifier(modifier : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETRECTANGULARSELECTIONMODIFIER, modifier, 0);
end;

function TScintilla.GetRectangularSelectionModifier : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETRECTANGULARSELECTIONMODIFIER, 0, 0);
end;

procedure TScintilla.SetAdditionalSelFore(fore : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETADDITIONALSELFORE, fore, 0);
end;

procedure TScintilla.SetAdditionalSelBack(back : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETADDITIONALSELBACK, back, 0);
end;

procedure TScintilla.SetAdditionalSelAlpha(alpha : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETADDITIONALSELALPHA, alpha, 0);
end;

function TScintilla.GetAdditionalSelAlpha : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETADDITIONALSELALPHA, 0, 0);
end;

procedure TScintilla.SetAdditionalCaretFore(fore : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETADDITIONALCARETFORE, fore, 0);
end;

function TScintilla.GetAdditionalCaretFore : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETADDITIONALCARETFORE, 0, 0);
end;

procedure TScintilla.RotateSelection;
begin
  SCPerform(sccmdctr, SCI_ROTATESELECTION, 0, 0);
end;

procedure TScintilla.SwapMainAnchorCaret;
begin
  SCPerform(sccmdctr, SCI_SWAPMAINANCHORCARET, 0, 0);
end;

procedure TScintilla.StartRecord;
begin
  SCPerform(sccmdctr, SCI_STARTRECORD, 0, 0);
end;

procedure TScintilla.StopRecord;
begin
  SCPerform(sccmdctr, SCI_STOPRECORD, 0, 0);
end;

procedure TScintilla.SetLexer(lexer : LongInt);
begin
  SCPerform(sccmdctr, SCI_SETLEXER, lexer, 0);
end;

function TScintilla.GetLexer : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETLEXER, 0, 0);
end;

procedure TScintilla.Colourise(start : LongInt; end_ : LongInt);
begin
  SCPerform(sccmdctr, SCI_COLOURISE, start, end_);
end;

procedure TScintilla.SetProperty(key : PAnsiChar; value : PAnsiChar);
begin
  SCPerform(sccmdctr, SCI_SETPROPERTY, LongInt(key), LongInt(value));
end;

procedure TScintilla.SetKeyWords(keywordSet : LongInt; keyWords : PAnsiChar);
begin
  SCPerform(sccmdctr, SCI_SETKEYWORDS, keywordSet, LongInt(keyWords));
end;

procedure TScintilla.SetLexerLanguage(language : PAnsiChar);
begin
  SCPerform(sccmdctr, SCI_SETLEXERLANGUAGE, 0, LongInt(language));
end;

procedure TScintilla.LoadLexerLibrary(path : PAnsiChar);
begin
  SCPerform(sccmdctr, SCI_LOADLEXERLIBRARY, 0, LongInt(path));
end;

function TScintilla.GetProperty(key : PAnsiChar; buf : PAnsiChar) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETPROPERTY, LongInt(key), LongInt(buf));
end;

function TScintilla.GetPropertyExpanded(key : PAnsiChar; buf : PAnsiChar) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETPROPERTYEXPANDED, LongInt(key), LongInt(buf));
end;

function TScintilla.GetPropertyInt(key : PAnsiChar) : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETPROPERTYINT, LongInt(key), 0);
end;

function TScintilla.GetStyleBitsNeeded : LongInt;
begin
  result := SCPerform(sccmdctr, SCI_GETSTYLEBITSNEEDED, 0, 0);
end;

//--FuncImp
// ---------------------------------------------------------------------------------------------------
// End of Generated functions, code below implements the Delphi side of the control.
// ---------------------------------------------------------------------------------------------------

procedure TScintilla.SetBorderStyle(Value: TBorderStyle);
begin
  If FBorderStyle <> Value then
  begin
    FBorderStyle := Value;
    //RecreateWnd;
  end;
end;

procedure TScintilla.CMCtl3DChanged(var Message: TMessage);
begin
  if NewStyleControls and (FBorderStyle = bsSingle) then
  begin
    RecreateWnd;
  end;
  inherited;
end;

procedure TScintilla.CreateParams(var Params: TCreateParams);
begin
  inherited CreateParams(Params);

  CreateSubClass(Params, 'Scintilla');

  with Params do
  begin
    Style := WS_CHILD or WS_VSCROLL or WS_HSCROLL or WS_CLIPCHILDREN or WS_CLIPSIBLINGS;
    if NewStyleControls and Ctl3D and (FBorderStyle = bsSingle) then
    begin
      Style := Style and not WS_BORDER;
      ExStyle := ExStyle or WS_EX_CLIENTEDGE;
    end;
    //WindowClass.style := WindowClass.style and not (CS_HREDRAW or CS_VREDRAW);
  end;
end;

constructor TScintilla.Create(AOwner : TComponent);
//const
//  EditStyle = [csClickEvents, csSetCaption, csDoubleClicks];
begin
  inherited;
//  if NewStyleControls then
//    ControlStyle := EditStyle else
//  ControlStyle := EditStyle + [csFramed];
  Width := 185;
  Height := 89;
  AutoSize := False;
  TabStop := True;
  FBorderStyle := bsSingle;
  FWantTabs := True;
  FWantReturns := True;
end;

procedure TScintilla.CreateWnd;
begin
  FCreating := True;
  try
    inherited CreateWnd;
  finally
    FCreating := False;
  end;
  //UpdateHeight;
  if (ComponentState * [csDesigning] = []) then
  begin
    @SCPerform := Pointer( SendMessage(WindowHandle, SCI_GETDIRECTFUNCTION,0,0) );
    sccmdctr := Pointer( SendMessage(WindowHandle, SCI_GETDIRECTPOINTER,0,0) );
  end;
end;

procedure TScintilla.DestroyWnd;
begin
  inherited DestroyWnd;
end;

procedure TScintilla.DefaultHandler(var Message);
begin
  case TMessage(Message).Msg of
    WM_SETFOCUS:
      if (Win32Platform = VER_PLATFORM_WIN32_WINDOWS) and
        not IsWindow(TWMSetFocus(Message).FocusedWnd) then
        TWMSetFocus(Message).FocusedWnd := 0;
  end;
  inherited;
end;

procedure TScintilla.WMGetDlgCode(var Message: TWMGetDlgCode);
begin
  inherited;
  if FWantTabs then Message.Result := Message.Result or DLGC_WANTTAB
  else Message.Result := Message.Result and not DLGC_WANTTAB;
  if not FWantReturns then
    Message.Result := Message.Result and not DLGC_WANTALLKEYS;
  Message.Result := Message.Result or DLGC_WANTARROWS;
end;

procedure TScintilla.WMNCDestroy(var Message: TWMNCDestroy);
begin
  inherited;
end;

procedure TScintilla.WMNotify(var Message: TWMNotify);
var nmh : PNMHdr;
  scn : PSCNotification;
begin
  //
  nmh := Message.NMHdr;

  if (nmh^.hwndFrom = Handle) then
  begin
    scn := PSCNotification(TMessage(Message).LParam);
    case nmh^.code of
      0 : ;
    //++EventImpl
      2000 : if assigned(FOnstyleneeded) then FOnstyleneeded(Self, scn^.position);
      2001 : if assigned(FOncharadded) then FOncharadded(Self, scn^.ch);
      2002 : if assigned(FOnsavepointreached) then FOnsavepointreached(Self);
      2003 : if assigned(FOnsavepointleft) then FOnsavepointleft(Self);
      2004 : if assigned(FOnmodifyattemptro) then FOnmodifyattemptro(Self);
      2005 : if assigned(FOnkey) then FOnkey(Self, scn^.ch, scn^.modifiers);
      2006 : if assigned(FOndoubleclick) then FOndoubleclick(Self);
      2007 : if assigned(FOnupdateui) then FOnupdateui(Self);
      2008 : if assigned(FOnmodified) then FOnmodified(Self, scn^.position, scn^.modificationType, scn^.text, scn^.length, scn^.linesAdded, scn^.line, scn^.foldLevelNow, scn^.foldLevelPrev);
      2009 : if assigned(FOnmacrorecord) then FOnmacrorecord(Self, scn^.message, scn^.wParam, scn^.lParam);
      2010 : if assigned(FOnmarginclick) then FOnmarginclick(Self, scn^.modifiers, scn^.position, scn^.margin);
      2011 : if assigned(FOnneedshown) then FOnneedshown(Self, scn^.position, scn^.length);
      2013 : if assigned(FOnpainted) then FOnpainted(Self);
      2014 : if assigned(FOnuserlistselection) then FOnuserlistselection(Self, scn^.listType, scn^.text);
      2015 : if assigned(FOnuridropped) then FOnuridropped(Self, scn^.text);
      2016 : if assigned(FOndwellstart) then FOndwellstart(Self, scn^.position);
      2017 : if assigned(FOndwellend) then FOndwellend(Self, scn^.position);
      2018 : if assigned(FOnzoom) then FOnzoom(Self);
      2019 : if assigned(FOnhotspotclick) then FOnhotspotclick(Self, scn^.modifiers, scn^.position);
      2020 : if assigned(FOnhotspotdoubleclick) then FOnhotspotdoubleclick(Self, scn^.modifiers, scn^.position);
      2021 : if assigned(FOncalltipclick) then FOncalltipclick(Self, scn^.position);
      2022 : if assigned(FOnautocselection) then FOnautocselection(Self, scn^.text);
      2023 : if assigned(FOnindicatorclick) then FOnindicatorclick(Self, scn^.modifiers, scn^.position);
      2024 : if assigned(FOnindicatorrelease) then FOnindicatorrelease(Self, scn^.modifiers, scn^.position);
      2025 : if assigned(FOnautoccancelled) then FOnautoccancelled(Self);
      2026 : if assigned(FOnautocchardeleted) then FOnautocchardeleted(Self);
    //--EventImpl
    end;
  end;
  inherited;
end;

////////////////////////////////////////////////////////////////////////////////

const bufSize = 131072;

procedure TScintilla.LoadFromFile(FileName: TFileName);
var
  buf : array[0..bufSize] of AnsiChar;
  read : Longint;
  op   : TFileStream;
begin
  // Use the SCI_ADDTEXT method to add text to the control
  // from a file, having cleared it first!
  ClearAll;
  op := TFileStream.Create(FileName, fmOpenRead or fmShareDenyWrite);
  try
    read := op.read(buf, SizeOf(buf));
    while (read > 0) do
    begin
      AddText(read, buf);
	   	read := op.Read(buf, SizeOf(buf));
    end;
    { TODO -oSimon -cIO : Make it so you can't undo loading the file! }
    { TODO -oSimon -cIO : Check line ends... }
    {int linesCR;
				int linesLF;
				int linesCRLF;
				CountLineEnds(linesCR, linesLF, linesCRLF);
				if ((linesLF > linesCR) && (linesLF > linesCRLF))
					SendEditor(SCI_SETEOLMODE, SC_EOL_LF);
				if ((linesCR > linesLF) && (linesCR > linesCRLF))
					SendEditor(SCI_SETEOLMODE, SC_EOL_CR);
				if ((linesCRLF > linesLF) && (linesCRLF > linesCR))
					SendEditor(SCI_SETEOLMODE, SC_EOL_CRLF);
			}
    Self.EmptyUndoBuffer;
    Self.SetSavePoint;
    Self.GotoPos(0);
  finally
    op.Free;
  end;
end;

procedure TScintilla.SaveToFile(FileName: TFileName);
var
  buf : array[0..bufSize+1] of Char;
  sv : TFileStream;
  lengthdoc : Cardinal;
  i         : Cardinal;
  grabsize  : Cardinal;
  range     : TTextRange;
  prange    : PTextRange;
begin
  prange := @range;
  sv := TFileStream.Create(FileName, fmCreate or fmShareExclusive);
  try
    lengthdoc := Self.GetLength;
    if lengthdoc = 0 then Exit;
    i := 0;
    while i < lengthdoc do
    begin
      grabsize := lengthdoc - i;
      if grabsize > bufSize then
        grabsize := bufSize;
      range.chrg.cpMin := i;
      range.chrg.cpMax := i + grabsize;
      range.lpstrText := @buf;
      Self.GetTextRange(prange);
      sv.Write(buf, grabsize);
      i := i + bufSize;
    end;
    SetSavePoint;
    { TODO -oSimon -cEditorFunctionality : Add option to clear undo stack at this point. }
  finally
    sv.Free;
  end;
end;

function TScintilla.SPerform(Msg, wParam, lParam: Integer) : LongInt;
begin
  Result := SCPerform(sccmdctr, Msg, wParam, lParam);
end;

procedure TScintilla.WMEraseBkgnd(var Message: TWMEraseBkgnd);

begin
	// If we don't do this, then in design mode we'll look really ugly...
	if ((csDesigning in ComponentState) and not (TMessage(Message).wParam = TMessage(Message).lParam)) then
        FillRect(Message.DC, ClientRect, GetStockObject(WHITE_BRUSH));

    Message.Result := 1;
end;
	  
procedure Register;
begin
   RegisterComponents( 'Scintilla', [ TScintilla ] );
end;

// The following code is used to allow an external object to receive all the
// calls to the scintilla control - instead of calling scintilla we just pass
// on the messages. To enable this, set up a OnMsgSent handler _FIRST_, and then
// set Dummy to true. This cannot be un-toggled!

function dummySCPerform(ptr: Pointer; Msg, wParam,
  lParam: Integer): Longint; cdecl;
begin
  if Assigned(fMsgSentDummyProc) then
    fMsgSentDummyProc(nil, Msg, wParam, lParam);
  Result := 0;
end;

procedure TScintilla.SetDummy(Value: Boolean);
begin
  SCPerform := @dummySCPerform;
  fMsgSentDummyProc := FOnMsgSent;
  FDummy := True;
end;

initialization
  scmod := LoadLibrary('SciLexer.DLL');

finalization
  FreeLibrary(scmod);

end.